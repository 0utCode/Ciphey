from ciphey.__main__ import main, make_default_config
def test_Hex_wMqteZYe():
    # {'PlainText Sentences': "Crown corporations, single purpose agencies that are still wholly owned by the government have been created to allow for these formerly government controlled industries to operate. If we are in a municipal arena, and I have been there where I have had land expropriated, there is a vehicle to have that done fairly. Lack of government services and assistance by way of people with a voice, not a machine, has left many in a position of no assistance as they get frustrated trying to understand voice messages coming out of Brandon. The government is committed to the democratic principle that producers should be in control of any future changes to the board's mandate.", 'Encrypted Texts': {'PlainText': "Crown corporations, single purpose agencies that are still wholly owned by the government have been created to allow for these formerly government controlled industries to operate. If we are in a municipal arena, and I have been there where I have had land expropriated, there is a vehicle to have that done fairly. Lack of government services and assistance by way of people with a voice, not a machine, has left many in a position of no assistance as they get frustrated trying to understand voice messages coming out of Brandon. The government is committed to the democratic principle that producers should be in control of any future changes to the board's mandate.", 'EncryptedText': '43726f776e20636f72706f726174696f6e732c2073696e676c6520707572706f7365206167656e63696573207468617420617265207374696c6c2077686f6c6c79206f776e65642062792074686520676f7665726e6d656e742068617665206265656e206372656174656420746f20616c6c6f7720666f7220746865736520666f726d65726c7920676f7665726e6d656e7420636f6e74726f6c6c656420696e647573747269657320746f206f7065726174652e2049662077652061726520696e2061206d756e69636970616c206172656e612c20616e6420492068617665206265656e2074686572652077686572652049206861766520686164206c616e6420657870726f707269617465642c20746865726520697320612076656869636c6520746f2068617665207468617420646f6e6520666169726c792e204c61636b206f6620676f7665726e6d656e7420736572766963657320616e6420617373697374616e636520627920776179206f662070656f706c652077697468206120766f6963652c206e6f742061206d616368696e652c20686173206c656674206d616e7920696e206120706f736974696f6e206f66206e6f20617373697374616e6365206173207468657920676574206672757374726174656420747279696e6720746f20756e6465727374616e6420766f696365206d6573736167657320636f6d696e67206f7574206f66204272616e646f6e2e2054686520676f7665726e6d656e7420697320636f6d6d697474656420746f207468652064656d6f637261746963207072696e6369706c6520746861742070726f6475636572732073686f756c6420626520696e20636f6e74726f6c206f6620616e7920667574757265206368616e67657320746f2074686520626f6172642773206d616e646174652e', 'CipherUsed': 'Hex'}}
    cfg = make_default_config('''43726f776e20636f72706f726174696f6e732c2073696e676c6520707572706f7365206167656e63696573207468617420617265207374696c6c2077686f6c6c79206f776e65642062792074686520676f7665726e6d656e742068617665206265656e206372656174656420746f20616c6c6f7720666f7220746865736520666f726d65726c7920676f7665726e6d656e7420636f6e74726f6c6c656420696e647573747269657320746f206f7065726174652e2049662077652061726520696e2061206d756e69636970616c206172656e612c20616e6420492068617665206265656e2074686572652077686572652049206861766520686164206c616e6420657870726f707269617465642c20746865726520697320612076656869636c6520746f2068617665207468617420646f6e6520666169726c792e204c61636b206f6620676f7665726e6d656e7420736572766963657320616e6420617373697374616e636520627920776179206f662070656f706c652077697468206120766f6963652c206e6f742061206d616368696e652c20686173206c656674206d616e7920696e206120706f736974696f6e206f66206e6f20617373697374616e6365206173207468657920676574206672757374726174656420747279696e6720746f20756e6465727374616e6420766f696365206d6573736167657320636f6d696e67206f7574206f66204272616e646f6e2e2054686520676f7665726e6d656e7420697320636f6d6d697474656420746f207468652064656d6f637261746963207072696e6369706c6520746861742070726f6475636572732073686f756c6420626520696e20636f6e74726f6c206f6620616e7920667574757265206368616e67657320746f2074686520626f6172642773206d616e646174652e''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Hex_goJtNPzf():
    # {'PlainText Sentences': 'It does not include any measures to ensure mandatory participation in meaningful rehabilitation programs. * * * \nTOBACCO ACT \nThe Speaker:\nPursuant to order made Thursday, October 8, 1998, the deferred recorded division is on the motion at second reading of Bill C-42. ):\nBetween 1983-84 and 1993 they raised the excise tax on gasoline not once, not twice but six times. It belongs to the people. ):\nMr. Speaker, I thank the member for his question.', 'Encrypted Texts': {'PlainText': 'It does not include any measures to ensure mandatory participation in meaningful rehabilitation programs. * * * \nTOBACCO ACT \nThe Speaker:\nPursuant to order made Thursday, October 8, 1998, the deferred recorded division is on the motion at second reading of Bill C-42. ):\nBetween 1983-84 and 1993 they raised the excise tax on gasoline not once, not twice but six times. It belongs to the people. ):\nMr. Speaker, I thank the member for his question.', 'EncryptedText': '497420646f6573206e6f7420696e636c75646520616e79206d6561737572657320746f20656e73757265206d616e6461746f72792070617274696369706174696f6e20696e206d65616e696e6766756c207265686162696c69746174696f6e2070726f6772616d732e202a202a202a200a544f424143434f20414354200a54686520537065616b65723a0a5075727375616e7420746f206f72646572206d6164652054687572736461792c204f63746f62657220382c20313939382c20746865206465666572726564207265636f72646564206469766973696f6e206973206f6e20746865206d6f74696f6e206174207365636f6e642072656164696e67206f662042696c6c20432d34322e20293a0a4265747765656e20313938332d383420616e642031393933207468657920726169736564207468652065786369736520746178206f6e206761736f6c696e65206e6f74206f6e63652c206e6f7420747769636520627574207369782074696d65732e2049742062656c6f6e677320746f207468652070656f706c652e20293a0a4d722e20537065616b65722c2049207468616e6b20746865206d656d62657220666f7220686973207175657374696f6e2e', 'CipherUsed': 'Hex'}}
    cfg = make_default_config('''497420646f6573206e6f7420696e636c75646520616e79206d6561737572657320746f20656e73757265206d616e6461746f72792070617274696369706174696f6e20696e206d65616e696e6766756c207265686162696c69746174696f6e2070726f6772616d732e202a202a202a200a544f424143434f20414354200a54686520537065616b65723a0a5075727375616e7420746f206f72646572206d6164652054687572736461792c204f63746f62657220382c20313939382c20746865206465666572726564207265636f72646564206469766973696f6e206973206f6e20746865206d6f74696f6e206174207365636f6e642072656164696e67206f662042696c6c20432d34322e20293a0a4265747765656e20313938332d383420616e642031393933207468657920726169736564207468652065786369736520746178206f6e206761736f6c696e65206e6f74206f6e63652c206e6f7420747769636520627574207369782074696d65732e2049742062656c6f6e677320746f207468652070656f706c652e20293a0a4d722e20537065616b65722c2049207468616e6b20746865206d656d62657220666f7220686973207175657374696f6e2e''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base64_xxgbwzzb():
    # {'PlainText Sentences': 'A farmer observed two trains coming down one track and they ran head on into one another. member:\nWere you here?', 'Encrypted Texts': {'PlainText': 'A farmer observed two trains coming down one track and they ran head on into one another. member:\nWere you here?', 'EncryptedText': 'QSBmYXJtZXIgb2JzZXJ2ZWQgdHdvIHRyYWlucyBjb21pbmcgZG93biBvbmUgdHJhY2sgYW5kIHRoZXkgcmFuIGhlYWQgb24gaW50byBvbmUgYW5vdGhlci4gbWVtYmVyOgpXZXJlIHlvdSBoZXJlPw==', 'CipherUsed': 'Base64'}}
    cfg = make_default_config('''QSBmYXJtZXIgb2JzZXJ2ZWQgdHdvIHRyYWlucyBjb21pbmcgZG93biBvbmUgdHJhY2sgYW5kIHRoZXkgcmFuIGhlYWQgb24gaW50byBvbmUgYW5vdGhlci4gbWVtYmVyOgpXZXJlIHlvdSBoZXJlPw==''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_MorseCode_etNKOSIF():
    # {'PlainText Sentences': 'The fish that swims in the water and that the fisherman will try to catch is under federal jurisdiction. People overrode guidelines that were set for the granting of money or for providing a loan and the Liberals closed their eyes because they were political friends. The voters of Port Moody-Coquitlam have put their confidence in a Liberal member to represent their interests in the House of Commons. That is a fairly sweeping power to grant a foreign officer on our soil.', 'Encrypted Texts': {'PlainText': 'The fish that swims in the water and that the fisherman will try to catch is under federal jurisdiction. People overrode guidelines that were set for the granting of money or for providing a loan and the Liberals closed their eyes because they were political friends. The voters of Port Moody-Coquitlam have put their confidence in a Liberal member to represent their interests in the House of Commons. That is a fairly sweeping power to grant a foreign officer on our soil.', 'EncryptedText': '- .... . / ..-. .. ... .... / - .... .- - / ... .-- .. -- ... / .. -. / - .... . / .-- .- - . .-. / .- -. -.. / - .... .- - / - .... . / ..-. .. ... .... . .-. -- .- -. / .-- .. .-.. .-.. / - .-. -.-- / - --- / -.-. .- - -.-. .... / .. ... / ..- -. -.. . .-. / ..-. . -.. . .-. .- .-.. / .--- ..- .-. .. ... -.. .. -.-. - .. --- -. .-.-.- / .--. . --- .--. .-.. . / --- ...- . .-. .-. --- -.. . / --. ..- .. -.. . .-.. .. -. . ... / - .... .- - / .-- . .-. . / ... . - / ..-. --- .-. / - .... . / --. .-. .- -. - .. -. --. / --- ..-. / -- --- -. . -.-- / --- .-. / ..-. --- .-. / .--. .-. --- ...- .. -.. .. -. --. / .- / .-.. --- .- -. / .- -. -.. / - .... . / .-.. .. -... . .-. .- .-.. ... / -.-. .-.. --- ... . -.. / - .... . .. .-. / . -.-- . ... / -... . -.-. .- ..- ... . / - .... . -.-- / .-- . .-. . / .--. --- .-.. .. - .. -.-. .- .-.. / ..-. .-. .. . -. -.. ... .-.-.- / - .... . / ...- --- - . .-. ... / --- ..-. / .--. --- .-. - / -- --- --- -.. -.-- -....- -.-. --- --.- ..- .. - .-.. .- -- / .... .- ...- . / .--. ..- - / - .... . .. .-. / -.-. --- -. ..-. .. -.. . -. -.-. . / .. -. / .- / .-.. .. -... . .-. .- .-.. / -- . -- -... . .-. / - --- / .-. . .--. .-. . ... . -. - / - .... . .. .-. / .. -. - . .-. . ... - ... / .. -. / - .... . / .... --- ..- ... . / --- ..-. / -.-. --- -- -- --- -. ... .-.-.- / - .... .- - / .. ... / .- / ..-. .- .. .-. .-.. -.-- / ... .-- . . .--. .. -. --. / .--. --- .-- . .-. / - --- / --. .-. .- -. - / .- / ..-. --- .-. . .. --. -. / --- ..-. ..-. .. -.-. . .-. / --- -. / --- ..- .-. / ... --- .. .-.. .-.-.-', 'CipherUsed': 'MorseCode'}}
    cfg = make_default_config('''- .... . / ..-. .. ... .... / - .... .- - / ... .-- .. -- ... / .. -. / - .... . / .-- .- - . .-. / .- -. -.. / - .... .- - / - .... . / ..-. .. ... .... . .-. -- .- -. / .-- .. .-.. .-.. / - .-. -.-- / - --- / -.-. .- - -.-. .... / .. ... / ..- -. -.. . .-. / ..-. . -.. . .-. .- .-.. / .--- ..- .-. .. ... -.. .. -.-. - .. --- -. .-.-.- / .--. . --- .--. .-.. . / --- ...- . .-. .-. --- -.. . / --. ..- .. -.. . .-.. .. -. . ... / - .... .- - / .-- . .-. . / ... . - / ..-. --- .-. / - .... . / --. .-. .- -. - .. -. --. / --- ..-. / -- --- -. . -.-- / --- .-. / ..-. --- .-. / .--. .-. --- ...- .. -.. .. -. --. / .- / .-.. --- .- -. / .- -. -.. / - .... . / .-.. .. -... . .-. .- .-.. ... / -.-. .-.. --- ... . -.. / - .... . .. .-. / . -.-- . ... / -... . -.-. .- ..- ... . / - .... . -.-- / .-- . .-. . / .--. --- .-.. .. - .. -.-. .- .-.. / ..-. .-. .. . -. -.. ... .-.-.- / - .... . / ...- --- - . .-. ... / --- ..-. / .--. --- .-. - / -- --- --- -.. -.-- -....- -.-. --- --.- ..- .. - .-.. .- -- / .... .- ...- . / .--. ..- - / - .... . .. .-. / -.-. --- -. ..-. .. -.. . -. -.-. . / .. -. / .- / .-.. .. -... . .-. .- .-.. / -- . -- -... . .-. / - --- / .-. . .--. .-. . ... . -. - / - .... . .. .-. / .. -. - . .-. . ... - ... / .. -. / - .... . / .... --- ..- ... . / --- ..-. / -.-. --- -- -- --- -. ... .-.-.- / - .... .- - / .. ... / .- / ..-. .- .. .-. .-.. -.-- / ... .-- . . .--. .. -. --. / .--. --- .-- . .-. / - --- / --. .-. .- -. - / .- / ..-. --- .-. . .. --. -. / --- ..-. ..-. .. -.-. . .-. / --- -. / --- ..- .-. / ... --- .. .-.. .-.-.-''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Ascii_sjxafitC():
    # {'PlainText Sentences': "Last night we debated a private member's bill that said that senators should be elected. What is happening now reminds me of the farm crisis in Ontario in the early 1980s. That means that there can be a fine imposed or incarceration as part of the sanctions.", 'Encrypted Texts': {'PlainText': "Last night we debated a private member's bill that said that senators should be elected. What is happening now reminds me of the farm crisis in Ontario in the early 1980s. That means that there can be a fine imposed or incarceration as part of the sanctions.", 'EncryptedText': '76 97 115 116 32 110 105 103 104 116 32 119 101 32 100 101 98 97 116 101 100 32 97 32 112 114 105 118 97 116 101 32 109 101 109 98 101 114 39 115 32 98 105 108 108 32 116 104 97 116 32 115 97 105 100 32 116 104 97 116 32 115 101 110 97 116 111 114 115 32 115 104 111 117 108 100 32 98 101 32 101 108 101 99 116 101 100 46 32 87 104 97 116 32 105 115 32 104 97 112 112 101 110 105 110 103 32 110 111 119 32 114 101 109 105 110 100 115 32 109 101 32 111 102 32 116 104 101 32 102 97 114 109 32 99 114 105 115 105 115 32 105 110 32 79 110 116 97 114 105 111 32 105 110 32 116 104 101 32 101 97 114 108 121 32 49 57 56 48 115 46 32 84 104 97 116 32 109 101 97 110 115 32 116 104 97 116 32 116 104 101 114 101 32 99 97 110 32 98 101 32 97 32 102 105 110 101 32 105 109 112 111 115 101 100 32 111 114 32 105 110 99 97 114 99 101 114 97 116 105 111 110 32 97 115 32 112 97 114 116 32 111 102 32 116 104 101 32 115 97 110 99 116 105 111 110 115 46', 'CipherUsed': 'Ascii'}}
    cfg = make_default_config('''76 97 115 116 32 110 105 103 104 116 32 119 101 32 100 101 98 97 116 101 100 32 97 32 112 114 105 118 97 116 101 32 109 101 109 98 101 114 39 115 32 98 105 108 108 32 116 104 97 116 32 115 97 105 100 32 116 104 97 116 32 115 101 110 97 116 111 114 115 32 115 104 111 117 108 100 32 98 101 32 101 108 101 99 116 101 100 46 32 87 104 97 116 32 105 115 32 104 97 112 112 101 110 105 110 103 32 110 111 119 32 114 101 109 105 110 100 115 32 109 101 32 111 102 32 116 104 101 32 102 97 114 109 32 99 114 105 115 105 115 32 105 110 32 79 110 116 97 114 105 111 32 105 110 32 116 104 101 32 101 97 114 108 121 32 49 57 56 48 115 46 32 84 104 97 116 32 109 101 97 110 115 32 116 104 97 116 32 116 104 101 114 101 32 99 97 110 32 98 101 32 97 32 102 105 110 101 32 105 109 112 111 115 101 100 32 111 114 32 105 110 99 97 114 99 101 114 97 116 105 111 110 32 97 115 32 112 97 114 116 32 111 102 32 116 104 101 32 115 97 110 99 116 105 111 110 115 46''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Vigenere_FYgvFQwV():
    # {'PlainText Sentences': '):\nMr. Speaker, Canada has one of the soundest environmental records of any country on the globe. This bill will amend the Municipal Grants Act, at it is claimed that it will improve the fairness, equity and predictability of payments made under the act from the federal government to municipal governments.', 'Encrypted Texts': {'PlainText': '):\nMr. Speaker, Canada has one of the soundest environmental records of any country on the globe. This bill will amend the Municipal Grants Act, at it is claimed that it will improve the fairness, equity and predictability of payments made under the act from the federal government to municipal governments.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
    cfg = make_default_config('''None''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base64_zDGBbeiE():
    # {'PlainText Sentences': 'Miss Deborah Grey (Edmonton North, Ref. This alternative must be effective in putting money back into the pockets of Canadians. Why is this government forcing Liberal MPs to vote against Joey and all blood injured Canadians? We will give our consent, but, next time, they must let us do our work conscientiously.', 'Encrypted Texts': {'PlainText': 'Miss Deborah Grey (Edmonton North, Ref. This alternative must be effective in putting money back into the pockets of Canadians. Why is this government forcing Liberal MPs to vote against Joey and all blood injured Canadians? We will give our consent, but, next time, they must let us do our work conscientiously.', 'EncryptedText': 'TWlzcyBEZWJvcmFoIEdyZXkgKEVkbW9udG9uIE5vcnRoLCBSZWYuIFRoaXMgYWx0ZXJuYXRpdmUgbXVzdCBiZSBlZmZlY3RpdmUgaW4gcHV0dGluZyBtb25leSBiYWNrIGludG8gdGhlIHBvY2tldHMgb2YgQ2FuYWRpYW5zLiBXaHkgaXMgdGhpcyBnb3Zlcm5tZW50IGZvcmNpbmcgTGliZXJhbCBNUHMgdG8gdm90ZSBhZ2FpbnN0IEpvZXkgYW5kIGFsbCBibG9vZCBpbmp1cmVkIENhbmFkaWFucz8gV2Ugd2lsbCBnaXZlIG91ciBjb25zZW50LCBidXQsIG5leHQgdGltZSwgdGhleSBtdXN0IGxldCB1cyBkbyBvdXIgd29yayBjb25zY2llbnRpb3VzbHku', 'CipherUsed': 'Base64'}}
    cfg = make_default_config('''TWlzcyBEZWJvcmFoIEdyZXkgKEVkbW9udG9uIE5vcnRoLCBSZWYuIFRoaXMgYWx0ZXJuYXRpdmUgbXVzdCBiZSBlZmZlY3RpdmUgaW4gcHV0dGluZyBtb25leSBiYWNrIGludG8gdGhlIHBvY2tldHMgb2YgQ2FuYWRpYW5zLiBXaHkgaXMgdGhpcyBnb3Zlcm5tZW50IGZvcmNpbmcgTGliZXJhbCBNUHMgdG8gdm90ZSBhZ2FpbnN0IEpvZXkgYW5kIGFsbCBibG9vZCBpbmp1cmVkIENhbmFkaWFucz8gV2Ugd2lsbCBnaXZlIG91ciBjb25zZW50LCBidXQsIG5leHQgdGltZSwgdGhleSBtdXN0IGxldCB1cyBkbyBvdXIgd29yayBjb25zY2llbnRpb3VzbHku''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Vigenere_BYlAuYQT():
    # {'PlainText Sentences': 'This is not all that impressive, particularly coming from a Liberal federal government, when we are aware that in its own backyard, with the Canada Elections Act, all manner of abuses are permitted by the letter and spirit of the legislation, since we know that the returning officers in the ridings are still partisan appointments and that certain things have been done that are a direct attack on Quebec. I do not believe that we have exhausted every possibility. ):\nMr. Speaker, my question is for the Secretary of State for Science and Technology.', 'Encrypted Texts': {'PlainText': 'This is not all that impressive, particularly coming from a Liberal federal government, when we are aware that in its own backyard, with the Canada Elections Act, all manner of abuses are permitted by the letter and spirit of the legislation, since we know that the returning officers in the ridings are still partisan appointments and that certain things have been done that are a direct attack on Quebec. I do not believe that we have exhausted every possibility. ):\nMr. Speaker, my question is for the Secretary of State for Science and Technology.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
    cfg = make_default_config('''None''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Ascii_ownebKEB():
    # {'PlainText Sentences': '):\nMadam Speaker, I would like an explanation. Maybe with a bit of luck the finance minister will be standing behind him and his image will also be there and he can share the responsibility. It took four years of work in parliament exposing the problem of extra billing by physicians and the proliferation of user fees in the health care system that was happening at that time to finally get the Liberal government to act on the eve of the federal election in 1984. Ms. Alexa McDonough (Halifax, NDP):\nMr. Speaker, my question is for the Prime Minister.', 'Encrypted Texts': {'PlainText': '):\nMadam Speaker, I would like an explanation. Maybe with a bit of luck the finance minister will be standing behind him and his image will also be there and he can share the responsibility. It took four years of work in parliament exposing the problem of extra billing by physicians and the proliferation of user fees in the health care system that was happening at that time to finally get the Liberal government to act on the eve of the federal election in 1984. Ms. Alexa McDonough (Halifax, NDP):\nMr. Speaker, my question is for the Prime Minister.', 'EncryptedText': '41 58 10 77 97 100 97 109 32 83 112 101 97 107 101 114 44 32 73 32 119 111 117 108 100 32 108 105 107 101 32 97 110 32 101 120 112 108 97 110 97 116 105 111 110 46 32 77 97 121 98 101 32 119 105 116 104 32 97 32 98 105 116 32 111 102 32 108 117 99 107 32 116 104 101 32 102 105 110 97 110 99 101 32 109 105 110 105 115 116 101 114 32 119 105 108 108 32 98 101 32 115 116 97 110 100 105 110 103 32 98 101 104 105 110 100 32 104 105 109 32 97 110 100 32 104 105 115 32 105 109 97 103 101 32 119 105 108 108 32 97 108 115 111 32 98 101 32 116 104 101 114 101 32 97 110 100 32 104 101 32 99 97 110 32 115 104 97 114 101 32 116 104 101 32 114 101 115 112 111 110 115 105 98 105 108 105 116 121 46 32 73 116 32 116 111 111 107 32 102 111 117 114 32 121 101 97 114 115 32 111 102 32 119 111 114 107 32 105 110 32 112 97 114 108 105 97 109 101 110 116 32 101 120 112 111 115 105 110 103 32 116 104 101 32 112 114 111 98 108 101 109 32 111 102 32 101 120 116 114 97 32 98 105 108 108 105 110 103 32 98 121 32 112 104 121 115 105 99 105 97 110 115 32 97 110 100 32 116 104 101 32 112 114 111 108 105 102 101 114 97 116 105 111 110 32 111 102 32 117 115 101 114 32 102 101 101 115 32 105 110 32 116 104 101 32 104 101 97 108 116 104 32 99 97 114 101 32 115 121 115 116 101 109 32 116 104 97 116 32 119 97 115 32 104 97 112 112 101 110 105 110 103 32 97 116 32 116 104 97 116 32 116 105 109 101 32 116 111 32 102 105 110 97 108 108 121 32 103 101 116 32 116 104 101 32 76 105 98 101 114 97 108 32 103 111 118 101 114 110 109 101 110 116 32 116 111 32 97 99 116 32 111 110 32 116 104 101 32 101 118 101 32 111 102 32 116 104 101 32 102 101 100 101 114 97 108 32 101 108 101 99 116 105 111 110 32 105 110 32 49 57 56 52 46 32 77 115 46 32 65 108 101 120 97 32 77 99 68 111 110 111 117 103 104 32 40 72 97 108 105 102 97 120 44 32 78 68 80 41 58 10 77 114 46 32 83 112 101 97 107 101 114 44 32 109 121 32 113 117 101 115 116 105 111 110 32 105 115 32 102 111 114 32 116 104 101 32 80 114 105 109 101 32 77 105 110 105 115 116 101 114 46', 'CipherUsed': 'Ascii'}}
    cfg = make_default_config('''41 58 10 77 97 100 97 109 32 83 112 101 97 107 101 114 44 32 73 32 119 111 117 108 100 32 108 105 107 101 32 97 110 32 101 120 112 108 97 110 97 116 105 111 110 46 32 77 97 121 98 101 32 119 105 116 104 32 97 32 98 105 116 32 111 102 32 108 117 99 107 32 116 104 101 32 102 105 110 97 110 99 101 32 109 105 110 105 115 116 101 114 32 119 105 108 108 32 98 101 32 115 116 97 110 100 105 110 103 32 98 101 104 105 110 100 32 104 105 109 32 97 110 100 32 104 105 115 32 105 109 97 103 101 32 119 105 108 108 32 97 108 115 111 32 98 101 32 116 104 101 114 101 32 97 110 100 32 104 101 32 99 97 110 32 115 104 97 114 101 32 116 104 101 32 114 101 115 112 111 110 115 105 98 105 108 105 116 121 46 32 73 116 32 116 111 111 107 32 102 111 117 114 32 121 101 97 114 115 32 111 102 32 119 111 114 107 32 105 110 32 112 97 114 108 105 97 109 101 110 116 32 101 120 112 111 115 105 110 103 32 116 104 101 32 112 114 111 98 108 101 109 32 111 102 32 101 120 116 114 97 32 98 105 108 108 105 110 103 32 98 121 32 112 104 121 115 105 99 105 97 110 115 32 97 110 100 32 116 104 101 32 112 114 111 108 105 102 101 114 97 116 105 111 110 32 111 102 32 117 115 101 114 32 102 101 101 115 32 105 110 32 116 104 101 32 104 101 97 108 116 104 32 99 97 114 101 32 115 121 115 116 101 109 32 116 104 97 116 32 119 97 115 32 104 97 112 112 101 110 105 110 103 32 97 116 32 116 104 97 116 32 116 105 109 101 32 116 111 32 102 105 110 97 108 108 121 32 103 101 116 32 116 104 101 32 76 105 98 101 114 97 108 32 103 111 118 101 114 110 109 101 110 116 32 116 111 32 97 99 116 32 111 110 32 116 104 101 32 101 118 101 32 111 102 32 116 104 101 32 102 101 100 101 114 97 108 32 101 108 101 99 116 105 111 110 32 105 110 32 49 57 56 52 46 32 77 115 46 32 65 108 101 120 97 32 77 99 68 111 110 111 117 103 104 32 40 72 97 108 105 102 97 120 44 32 78 68 80 41 58 10 77 114 46 32 83 112 101 97 107 101 114 44 32 109 121 32 113 117 101 115 116 105 111 110 32 105 115 32 102 111 114 32 116 104 101 32 80 114 105 109 101 32 77 105 110 105 115 116 101 114 46''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base32_uCXROBIc():
    # {'PlainText Sentences': 'Whether this will be the result remains questionable. * * * \nBAFFIN REGIONAL YOUTH COUNCIL \nMrs. Nancy Karetak-Lindell (Nunavut, Lib. We will do the best to ensure that all the recommendations made by the board will be adhered to very quickly. From an international perspective one must remember that in 1991 Canada and the United States signed the air quality agreement whereby each country is responsible for the effects of air pollution it causes in the other country.', 'Encrypted Texts': {'PlainText': 'Whether this will be the result remains questionable. * * * \nBAFFIN REGIONAL YOUTH COUNCIL \nMrs. Nancy Karetak-Lindell (Nunavut, Lib. We will do the best to ensure that all the recommendations made by the board will be adhered to very quickly. From an international perspective one must remember that in 1991 Canada and the United States signed the air quality agreement whereby each country is responsible for the effects of air pollution it causes in the other country.', 'EncryptedTextipherUsed': 'Base32'}}
    cfg = make_default_config
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base32_GcPfYqCr():
    # {'PlainText Sentences': "Mr. Paul Szabo (Mississauga South, Lib. With the type of justice system the bill will bring in, what hope do these people have to have enshrined later on in the history of the new territory the same type of justice system the rest of Canadians enjoy? Finally, Bill C-54 will complement Quebec's legislation.", 'Encrypted Texts': {'PlainText': "Mr. Paul Szabo (Mississauga South, Lib. With the type of justice system the bill will bring in, what hope do these people have to have enshrined later on in the history of the new territory the same type of justice system the rest of Canadians enjoy? Finally, Bill C-54 will complement Quebec's legislation.", 'EncryptedTextipherUsed': 'Base32'}}
    cfg = make_default_config
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base32_eMnneFGG():
    # {'PlainText Sentences': 'We stand for tax reduction.', 'Encrypted Texts': {'PlainText': 'We stand for tax reduction.', 'EncryptedText': 'K5SSA43UMFXGIIDGN5ZCA5DBPAQHEZLEOVRXI2LPNYXA====', 'CipherUsed': 'Base32'}}
    cfg = make_default_config('''K5SSA43UMFXGIIDGN5ZCA5DBPAQHEZLEOVRXI2LPNYXA====''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base64_lXWQWXWE():
    # {'PlainText Sentences': 'The first one bears 1,385 signatures of electors resident in New Brunswick, primarily in the districts of Havelock, Petitcodiac and Salisbury. ):\nMr. Speaker, it is hard to imagine being so cavalier about a billion dollar bungle.', 'Encrypted Texts': {'PlainText': 'The first one bears 1,385 signatures of electors resident in New Brunswick, primarily in the districts of Havelock, Petitcodiac and Salisbury. ):\nMr. Speaker, it is hard to imagine being so cavalier about a billion dollar bungle.', 'EncryptedText': 'VGhlIGZpcnN0IG9uZSBiZWFycyAxLDM4NSBzaWduYXR1cmVzIG9mIGVsZWN0b3JzIHJlc2lkZW50IGluIE5ldyBCcnVuc3dpY2ssIHByaW1hcmlseSBpbiB0aGUgZGlzdHJpY3RzIG9mIEhhdmVsb2NrLCBQZXRpdGNvZGlhYyBhbmQgU2FsaXNidXJ5LiApOgpNci4gU3BlYWtlciwgaXQgaXMgaGFyZCB0byBpbWFnaW5lIGJlaW5nIHNvIGNhdmFsaWVyIGFib3V0IGEgYmlsbGlvbiBkb2xsYXIgYnVuZ2xlLg==', 'CipherUsed': 'Base64'}}
    cfg = make_default_config('''VGhlIGZpcnN0IG9uZSBiZWFycyAxLDM4NSBzaWduYXR1cmVzIG9mIGVsZWN0b3JzIHJlc2lkZW50IGluIE5ldyBCcnVuc3dpY2ssIHByaW1hcmlseSBpbiB0aGUgZGlzdHJpY3RzIG9mIEhhdmVsb2NrLCBQZXRpdGNvZGlhYyBhbmQgU2FsaXNidXJ5LiApOgpNci4gU3BlYWtlciwgaXQgaXMgaGFyZCB0byBpbWFnaW5lIGJlaW5nIHNvIGNhdmFsaWVyIGFib3V0IGEgYmlsbGlvbiBkb2xsYXIgYnVuZ2xlLg==''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Hex_eiLDnClZ():
    # {'PlainText Sentences': 'He had great input in our discussions of what type of government would work on reserves.', 'Encrypted Texts': {'PlainText': 'He had great input in our discussions of what type of government would work on reserves.', 'EncryptedText': '48652068616420677265617420696e70757420696e206f75722064697363757373696f6e73206f6620776861742074797065206f6620676f7665726e6d656e7420776f756c6420776f726b206f6e2072657365727665732e', 'CipherUsed': 'Hex'}}
    cfg = make_default_config('''48652068616420677265617420696e70757420696e206f75722064697363757373696f6e73206f6620776861742074797065206f6620676f7665726e6d656e7420776f756c6420776f726b206f6e2072657365727665732e''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Reverse_FnCkLGdn():
    # {'PlainText Sentences': "For the time being, I invite all Liberal members in this House to support this motion to make it clear to the government that it has a moral and financial responsibility to correct an incredibly unfair situation. Obviously he is looking for a pedestal or a way to rehabilitate his abysmal performance in 1995 when he disappeared from the debate and left it to the then leader of the Progressive Conservative Party to try and carry his baggage. (Motion agreed to) \nThe Speaker:\nI welcome you, my colleague, also. Canada is a comparatively safe society with a crime rate that has dropped steadily over the last four years. A viable monetary union would imply a few legal agreements and common institutions''.", 'Encrypted Texts': {'PlainText': "For the time being, I invite all Liberal members in this House to support this motion to make it clear to the government that it has a moral and financial responsibility to correct an incredibly unfair situation. Obviously he is looking for a pedestal or a way to rehabilitate his abysmal performance in 1995 when he disappeared from the debate and left it to the then leader of the Progressive Conservative Party to try and carry his baggage. (Motion agreed to) \nThe Speaker:\nI welcome you, my colleague, also. Canada is a comparatively safe society with a crime rate that has dropped steadily over the last four years. A viable monetary union would imply a few legal agreements and common institutions''.", 'EncryptedText': ".''snoitutitsni nommoc dna stnemeerga lagel wef a ylpmi dluow noinu yratenom elbaiv A .sraey ruof tsal eht revo ylidaets deppord sah taht etar emirc a htiw yteicos efas ylevitarapmoc a si adanaC .osla ,eugaelloc ym ,uoy emoclew I\n:rekaepS ehT\n )ot deerga noitoM( .egaggab sih yrrac dna yrt ot ytraP evitavresnoC evissergorP eht fo redael neht eht ot ti tfel dna etabed eht morf deraeppasid eh nehw 5991 ni ecnamrofrep lamsyba sih etatilibaher ot yaw a ro latsedep a rof gnikool si eh ylsuoivbO .noitautis riafnu ylbidercni na tcerroc ot ytilibisnopser laicnanif dna larom a sah ti taht tnemnrevog eht ot raelc ti ekam ot noitom siht troppus ot esuoH siht ni srebmem larebiL lla etivni I ,gnieb emit eht roF", 'CipherUsed': 'Reverse'}}
    cfg = make_default_config('''.''snoitutitsni nommoc dna stnemeerga lagel wef a ylpmi dluow noinu yratenom elbaiv A .sraey ruof tsal eht revo ylidaets deppord sah taht etar emirc a htiw yteicos efas ylevitarapmoc a si adanaC .osla ,eugaelloc ym ,uoy emoclew I
:rekaepS ehT
 )ot deerga noitoM( .egaggab sih yrrac dna yrt ot ytraP evitavresnoC evissergorP eht fo redael neht eht ot ti tfel dna etabed eht morf deraeppasid eh nehw 5991 ni ecnamrofrep lamsyba sih etatilibaher ot yaw a ro latsedep a rof gnikool si eh ylsuoivbO .noitautis riafnu ylbidercni na tcerroc ot ytilibisnopser laicnanif dna larom a sah ti taht tnemnrevog eht ot raelc ti ekam ot noitom siht troppus ot esuoH siht ni srebmem larebiL lla etivni I ,gnieb emit eht roF''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Binary_iYqAlsgs():
    # {'PlainText Sentences': 'I hope a spirit of non-partisanship is now permeating the government benches when it comes to fundamental issues of justice.', 'Encrypted Texts': {'PlainText': 'I hope a spirit of non-partisanship is now permeating the government benches when it comes to fundamental issues of justice.', 'EncryptedText': '1001001 100000 1101000 1101111 1110000 1100101 100000 1100001 100000 1110011 1110000 1101001 1110010 1101001 1110100 100000 1101111 1100110 100000 1101110 1101111 1101110 101101 1110000 1100001 1110010 1110100 1101001 1110011 1100001 1101110 1110011 1101000 1101001 1110000 100000 1101001 1110011 100000 1101110 1101111 1110111 100000 1110000 1100101 1110010 1101101 1100101 1100001 1110100 1101001 1101110 1100111 100000 1110100 1101000 1100101 100000 1100111 1101111 1110110 1100101 1110010 1101110 1101101 1100101 1101110 1110100 100000 1100010 1100101 1101110 1100011 1101000 1100101 1110011 100000 1110111 1101000 1100101 1101110 100000 1101001 1110100 100000 1100011 1101111 1101101 1100101 1110011 100000 1110100 1101111 100000 1100110 1110101 1101110 1100100 1100001 1101101 1100101 1101110 1110100 1100001 1101100 100000 1101001 1110011 1110011 1110101 1100101 1110011 100000 1101111 1100110 100000 1101010 1110101 1110011 1110100 1101001 1100011 1100101 101110', 'CipherUsed': 'Binary'}}
    cfg = make_default_config('''1001001 100000 1101000 1101111 1110000 1100101 100000 1100001 100000 1110011 1110000 1101001 1110010 1101001 1110100 100000 1101111 1100110 100000 1101110 1101111 1101110 101101 1110000 1100001 1110010 1110100 1101001 1110011 1100001 1101110 1110011 1101000 1101001 1110000 100000 1101001 1110011 100000 1101110 1101111 1110111 100000 1110000 1100101 1110010 1101101 1100101 1100001 1110100 1101001 1101110 1100111 100000 1110100 1101000 1100101 100000 1100111 1101111 1110110 1100101 1110010 1101110 1101101 1100101 1101110 1110100 100000 1100010 1100101 1101110 1100011 1101000 1100101 1110011 100000 1110111 1101000 1100101 1101110 100000 1101001 1110100 100000 1100011 1101111 1101101 1100101 1110011 100000 1110100 1101111 100000 1100110 1110101 1101110 1100100 1100001 1101101 1100101 1101110 1110100 1100001 1101100 100000 1101001 1110011 1110011 1110101 1100101 1110011 100000 1101111 1100110 100000 1101010 1110101 1110011 1110100 1101001 1100011 1100101 101110''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base64_WkbVPxRc():
    # {'PlainText Sentences': 'Hon. They keep talking about conservation. I do not think he would want to suggest otherwise. Yes, they will be difficult to enforce.', 'Encrypted Texts': {'PlainText': 'Hon. They keep talking about conservation. I do not think he would want to suggest otherwise. Yes, they will be difficult to enforce.', 'EncryptedText': 'SG9uLiBUaGV5IGtlZXAgdGFsa2luZyBhYm91dCBjb25zZXJ2YXRpb24uIEkgZG8gbm90IHRoaW5rIGhlIHdvdWxkIHdhbnQgdG8gc3VnZ2VzdCBvdGhlcndpc2UuIFllcywgdGhleSB3aWxsIGJlIGRpZmZpY3VsdCB0byBlbmZvcmNlLg==', 'CipherUsed': 'Base64'}}
    cfg = make_default_config('''SG9uLiBUaGV5IGtlZXAgdGFsa2luZyBhYm91dCBjb25zZXJ2YXRpb24uIEkgZG8gbm90IHRoaW5rIGhlIHdvdWxkIHdhbnQgdG8gc3VnZ2VzdCBvdGhlcndpc2UuIFllcywgdGhleSB3aWxsIGJlIGRpZmZpY3VsdCB0byBlbmZvcmNlLg==''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Reverse_DtpeNoni():
    # {'PlainText Sentences': 'I cannot understand for a moment why some things are so dense that this cannot get through, that it is not working.', 'Encrypted Texts': {'PlainText': 'I cannot understand for a moment why some things are so dense that this cannot get through, that it is not working.', 'EncryptedText': '.gnikrow ton si ti taht ,hguorht teg tonnac siht taht esned os era sgniht emos yhw tnemom a rof dnatsrednu tonnac I', 'CipherUsed': 'Reverse'}}
    cfg = make_default_config('''.gnikrow ton si ti taht ,hguorht teg tonnac siht taht esned os era sgniht emos yhw tnemom a rof dnatsrednu tonnac I''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base16_RutIoOVA():
    # {'PlainText Sentences': 'When there were 3,000 workers at the Lévis shipyard, 500 of them came from his riding. 1, 2, 3 and 5, does not really add anything to the bill. It is because of a handful of powerful men who have made themselves rich at taxpayer expense.', 'Encrypted Texts': {'PlainText': 'When there were 3,000 workers at the Lévis shipyard, 500 of them came from his riding. 1, 2, 3 and 5, does not really add anything to the bill. It is because of a handful of powerful men who have made themselves rich at taxpayer expense.', 'EncryptedText': '5768656E207468657265207765726520332C30303020776F726B65727320617420746865204CC3A97669732073686970796172642C20353030206F66207468656D2063616D652066726F6D2068697320726964696E672E20312C20322C203320616E6420352C20646F6573206E6F74207265616C6C792061646420616E797468696E6720746F207468652062696C6C2E2049742069732062656361757365206F6620612068616E6466756C206F6620706F77657266756C206D656E2077686F2068617665206D616465207468656D73656C766573207269636820617420746178706179657220657870656E73652E', 'CipherUsed': 'Base16'}}
    cfg = make_default_config('''5768656E207468657265207765726520332C30303020776F726B65727320617420746865204CC3A97669732073686970796172642C20353030206F66207468656D2063616D652066726F6D2068697320726964696E672E20312C20322C203320616E6420352C20646F6573206E6F74207265616C6C792061646420616E797468696E6720746F207468652062696C6C2E2049742069732062656361757365206F6620612068616E6466756C206F6620706F77657266756C206D656E2077686F2068617665206D616465207468656D73656C766573207269636820617420746178706179657220657870656E73652E''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_MorseCode_uGlKeQKF():
    # {'PlainText Sentences': "In just a few weeks, close to 8,000 people signed that petition to abolish the Senate. If not, will the minister table that signed agreement with the U.S. along with that bride magazine in the House today? Of course there is no legal requirement to pay or set penalties for not paying on time. Following the Bloc Quebecois' comments, we won on one point. ):\nMr. Speaker, the empty rhetoric coming from the Indian affairs minister and the accusations she is throwing out are unacceptable.", 'Encrypted Texts': {'PlainText': "In just a few weeks, close to 8,000 people signed that petition to abolish the Senate. If not, will the minister table that signed agreement with the U.S. along with that bride magazine in the House today? Of course there is no legal requirement to pay or set penalties for not paying on time. Following the Bloc Quebecois' comments, we won on one point. ):\nMr. Speaker, the empty rhetoric coming from the Indian affairs minister and the accusations she is throwing out are unacceptable.", 'EncryptedText': '.. -. / .--- ..- ... - / .- / ..-. . .-- / .-- . . -.- ... --..-- / -.-. .-.. --- ... . / - --- / ---.. --..-- ----- ----- ----- / .--. . --- .--. .-.. . / ... .. --. -. . -.. / - .... .- - / .--. . - .. - .. --- -. / - --- / .- -... --- .-.. .. ... .... / - .... . / ... . -. .- - . .-.-.- / .. ..-. / -. --- - --..-- / .-- .. .-.. .-.. / - .... . / -- .. -. .. ... - . .-. / - .- -... .-.. . / - .... .- - / ... .. --. -. . -.. / .- --. .-. . . -- . -. - / .-- .. - .... / - .... . / ..- .-.-.- ... .-.-.- / .- .-.. --- -. --. / .-- .. - .... / - .... .- - / -... .-. .. -.. . / -- .- --. .- --.. .. -. . / .. -. / - .... . / .... --- ..- ... . / - --- -.. .- -.-- ..--.. / --- ..-. / -.-. --- ..- .-. ... . / - .... . .-. . / .. ... / -. --- / .-.. . --. .- .-.. / .-. . --.- ..- .. .-. . -- . -. - / - --- / .--. .- -.-- / --- .-. / ... . - / .--. . -. .- .-.. - .. . ... / ..-. --- .-. / -. --- - / .--. .- -.-- .. -. --. / --- -. / - .. -- . .-.-.- / ..-. --- .-.. .-.. --- .-- .. -. --. / - .... . / -... .-.. --- -.-. / --.- ..- . -... . -.-. --- .. ... .----. / -.-. --- -- -- . -. - ... --..-- / .-- . / .-- --- -. / --- -. / --- -. . / .--. --- .. -. - .-.-.- / -.--.- ---...  -- .-. .-.-.- / ... .--. . .- -.- . .-. --..-- / - .... . / . -- .--. - -.-- / .-. .... . - --- .-. .. -.-. / -.-. --- -- .. -. --. / ..-. .-. --- -- / - .... . / .. -. -.. .. .- -. / .- ..-. ..-. .- .. .-. ... / -- .. -. .. ... - . .-. / .- -. -.. / - .... . / .- -.-. -.-. ..- ... .- - .. --- -. ... / ... .... . / .. ... / - .... .-. --- .-- .. -. --. / --- ..- - / .- .-. . / ..- -. .- -.-. -.-. . .--. - .- -... .-.. . .-.-.-', 'CipherUsed': 'MorseCode'}}
    cfg = make_default_config('''.. -. / .--- ..- ... - / .- / ..-. . .-- / .-- . . -.- ... --..-- / -.-. .-.. --- ... . / - --- / ---.. --..-- ----- ----- ----- / .--. . --- .--. .-.. . / ... .. --. -. . -.. / - .... .- - / .--. . - .. - .. --- -. / - --- / .- -... --- .-.. .. ... .... / - .... . / ... . -. .- - . .-.-.- / .. ..-. / -. --- - --..-- / .-- .. .-.. .-.. / - .... . / -- .. -. .. ... - . .-. / - .- -... .-.. . / - .... .- - / ... .. --. -. . -.. / .- --. .-. . . -- . -. - / .-- .. - .... / - .... . / ..- .-.-.- ... .-.-.- / .- .-.. --- -. --. / .-- .. - .... / - .... .- - / -... .-. .. -.. . / -- .- --. .- --.. .. -. . / .. -. / - .... . / .... --- ..- ... . / - --- -.. .- -.-- ..--.. / --- ..-. / -.-. --- ..- .-. ... . / - .... . .-. . / .. ... / -. --- / .-.. . --. .- .-.. / .-. . --.- ..- .. .-. . -- . -. - / - --- / .--. .- -.-- / --- .-. / ... . - / .--. . -. .- .-.. - .. . ... / ..-. --- .-. / -. --- - / .--. .- -.-- .. -. --. / --- -. / - .. -- . .-.-.- / ..-. --- .-.. .-.. --- .-- .. -. --. / - .... . / -... .-.. --- -.-. / --.- ..- . -... . -.-. --- .. ... .----. / -.-. --- -- -- . -. - ... --..-- / .-- . / .-- --- -. / --- -. / --- -. . / .--. --- .. -. - .-.-.- / -.--.- ---...  -- .-. .-.-.- / ... .--. . .- -.- . .-. --..-- / - .... . / . -- .--. - -.-- / .-. .... . - --- .-. .. -.-. / -.-. --- -- .. -. --. / ..-. .-. --- -- / - .... . / .. -. -.. .. .- -. / .- ..-. ..-. .- .. .-. ... / -- .. -. .. ... - . .-. / .- -. -.. / - .... . / .- -.-. -.-. ..- ... .- - .. --- -. ... / ... .... . / .. ... / - .... .-. --- .-- .. -. --. / --- ..- - / .- .-. . / ..- -. .- -.-. -.-. . .--. - .- -... .-.. . .-.-.-''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Ascii_FtHyatep():
    # {'PlainText Sentences': "We have also witnessed the disgraceful media campaign by the National Citizens' Coalition to discredit the wheat board. If that happens we will basically have a welfare program and there will be a lack of political support for that program. Mr. Michel Bellehumeur (Berthier-Montcalm, BQ):\nMr. Speaker, I will conclude. He says: ``It is not an unlegislated area'' . The proposed legislation now before the House strikes an appropriate balance between those competing views and values.", 'Encrypted Texts': {'PlainText': "We have also witnessed the disgraceful media campaign by the National Citizens' Coalition to discredit the wheat board. If that happens we will basically have a welfare program and there will be a lack of political support for that program. Mr. Michel Bellehumeur (Berthier-Montcalm, BQ):\nMr. Speaker, I will conclude. He says: ``It is not an unlegislated area'' . The proposed legislation now before the House strikes an appropriate balance between those competing views and values.", 'EncryptedText': '87 101 32 104 97 118 101 32 97 108 115 111 32 119 105 116 110 101 115 115 101 100 32 116 104 101 32 100 105 115 103 114 97 99 101 102 117 108 32 109 101 100 105 97 32 99 97 109 112 97 105 103 110 32 98 121 32 116 104 101 32 78 97 116 105 111 110 97 108 32 67 105 116 105 122 101 110 115 39 32 67 111 97 108 105 116 105 111 110 32 116 111 32 100 105 115 99 114 101 100 105 116 32 116 104 101 32 119 104 101 97 116 32 98 111 97 114 100 46 32 73 102 32 116 104 97 116 32 104 97 112 112 101 110 115 32 119 101 32 119 105 108 108 32 98 97 115 105 99 97 108 108 121 32 104 97 118 101 32 97 32 119 101 108 102 97 114 101 32 112 114 111 103 114 97 109 32 97 110 100 32 116 104 101 114 101 32 119 105 108 108 32 98 101 32 97 32 108 97 99 107 32 111 102 32 112 111 108 105 116 105 99 97 108 32 115 117 112 112 111 114 116 32 102 111 114 32 116 104 97 116 32 112 114 111 103 114 97 109 46 32 77 114 46 32 77 105 99 104 101 108 32 66 101 108 108 101 104 117 109 101 117 114 32 40 66 101 114 116 104 105 101 114 45 77 111 110 116 99 97 108 109 44 32 66 81 41 58 10 77 114 46 32 83 112 101 97 107 101 114 44 32 73 32 119 105 108 108 32 99 111 110 99 108 117 100 101 46 32 72 101 32 115 97 121 115 58 32 96 96 73 116 32 105 115 32 110 111 116 32 97 110 32 117 110 108 101 103 105 115 108 97 116 101 100 32 97 114 101 97 39 39 32 46 32 84 104 101 32 112 114 111 112 111 115 101 100 32 108 101 103 105 115 108 97 116 105 111 110 32 110 111 119 32 98 101 102 111 114 101 32 116 104 101 32 72 111 117 115 101 32 115 116 114 105 107 101 115 32 97 110 32 97 112 112 114 111 112 114 105 97 116 101 32 98 97 108 97 110 99 101 32 98 101 116 119 101 101 110 32 116 104 111 115 101 32 99 111 109 112 101 116 105 110 103 32 118 105 101 119 115 32 97 110 100 32 118 97 108 117 101 115 46', 'CipherUsed': 'Ascii'}}
    cfg = make_default_config('''87 101 32 104 97 118 101 32 97 108 115 111 32 119 105 116 110 101 115 115 101 100 32 116 104 101 32 100 105 115 103 114 97 99 101 102 117 108 32 109 101 100 105 97 32 99 97 109 112 97 105 103 110 32 98 121 32 116 104 101 32 78 97 116 105 111 110 97 108 32 67 105 116 105 122 101 110 115 39 32 67 111 97 108 105 116 105 111 110 32 116 111 32 100 105 115 99 114 101 100 105 116 32 116 104 101 32 119 104 101 97 116 32 98 111 97 114 100 46 32 73 102 32 116 104 97 116 32 104 97 112 112 101 110 115 32 119 101 32 119 105 108 108 32 98 97 115 105 99 97 108 108 121 32 104 97 118 101 32 97 32 119 101 108 102 97 114 101 32 112 114 111 103 114 97 109 32 97 110 100 32 116 104 101 114 101 32 119 105 108 108 32 98 101 32 97 32 108 97 99 107 32 111 102 32 112 111 108 105 116 105 99 97 108 32 115 117 112 112 111 114 116 32 102 111 114 32 116 104 97 116 32 112 114 111 103 114 97 109 46 32 77 114 46 32 77 105 99 104 101 108 32 66 101 108 108 101 104 117 109 101 117 114 32 40 66 101 114 116 104 105 101 114 45 77 111 110 116 99 97 108 109 44 32 66 81 41 58 10 77 114 46 32 83 112 101 97 107 101 114 44 32 73 32 119 105 108 108 32 99 111 110 99 108 117 100 101 46 32 72 101 32 115 97 121 115 58 32 96 96 73 116 32 105 115 32 110 111 116 32 97 110 32 117 110 108 101 103 105 115 108 97 116 101 100 32 97 114 101 97 39 39 32 46 32 84 104 101 32 112 114 111 112 111 115 101 100 32 108 101 103 105 115 108 97 116 105 111 110 32 110 111 119 32 98 101 102 111 114 101 32 116 104 101 32 72 111 117 115 101 32 115 116 114 105 107 101 115 32 97 110 32 97 112 112 114 111 112 114 105 97 116 101 32 98 97 108 97 110 99 101 32 98 101 116 119 101 101 110 32 116 104 111 115 101 32 99 111 109 112 101 116 105 110 103 32 118 105 101 119 115 32 97 110 100 32 118 97 108 117 101 115 46''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Hex_loGHBLEP():
    # {'PlainText Sentences': 'In doing some of this work, I wanted to share with the House a little bit of information with regard to the importance of breast feeding. Let it never be said in the House that the government does not listen to advice given by producers and those who are interested in the Canadian wheat industry. member for Vancouver-Quadra. Motion No. If an appeal fails, then the issue should be put before this parliament and it should be debated.', 'Encrypted Texts': {'PlainText': 'In doing some of this work, I wanted to share with the House a little bit of information with regard to the importance of breast feeding. Let it never be said in the House that the government does not listen to advice given by producers and those who are interested in the Canadian wheat industry. member for Vancouver-Quadra. Motion No. If an appeal fails, then the issue should be put before this parliament and it should be debated.', 'EncryptedText': '496e20646f696e6720736f6d65206f66207468697320776f726b2c20492077616e74656420746f20736861726520776974682074686520486f7573652061206c6974746c6520626974206f6620696e666f726d6174696f6e20776974682072656761726420746f2074686520696d706f7274616e6365206f66206272656173742066656564696e672e204c6574206974206e65766572206265207361696420696e2074686520486f75736520746861742074686520676f7665726e6d656e7420646f6573206e6f74206c697374656e20746f2061647669636520676976656e2062792070726f64756365727320616e642074686f73652077686f2061726520696e746572657374656420696e207468652043616e616469616e20776865617420696e6475737472792e206d656d62657220666f722056616e636f757665722d5175616472612e204d6f74696f6e204e6f2e20496620616e2061707065616c206661696c732c207468656e207468652069737375652073686f756c6420626520707574206265666f72652074686973207061726c69616d656e7420616e642069742073686f756c6420626520646562617465642e', 'CipherUsed': 'Hex'}}
    cfg = make_default_config('''496e20646f696e6720736f6d65206f66207468697320776f726b2c20492077616e74656420746f20736861726520776974682074686520486f7573652061206c6974746c6520626974206f6620696e666f726d6174696f6e20776974682072656761726420746f2074686520696d706f7274616e6365206f66206272656173742066656564696e672e204c6574206974206e65766572206265207361696420696e2074686520486f75736520746861742074686520676f7665726e6d656e7420646f6573206e6f74206c697374656e20746f2061647669636520676976656e2062792070726f64756365727320616e642074686f73652077686f2061726520696e746572657374656420696e207468652043616e616469616e20776865617420696e6475737472792e206d656d62657220666f722056616e636f757665722d5175616472612e204d6f74696f6e204e6f2e20496620616e2061707065616c206661696c732c207468656e207468652069737375652073686f756c6420626520707574206265666f72652074686973207061726c69616d656e7420616e642069742073686f756c6420626520646562617465642e''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Binary_gyhamRMi():
    # {'PlainText Sentences': "I share the member's concern. He mentioned as another example the fact that zero deficit has already been achieved in some provinces; therefore, the measures put forward by the federal government will help all the provinces. It would be much easier if there were only two countries on this planet, Canada and the rest of world.", 'Encrypted Texts': {'PlainText': "I share the member's concern. He mentioned as another example the fact that zero deficit has already been achieved in some provinces; therefore, the measures put forward by the federal government will help all the provinces. It would be much easier if there were only two countries on this planet, Canada and the rest of world.", 'EncryptedText': '1001001 100000 1110011 1101000 1100001 1110010 1100101 100000 1110100 1101000 1100101 100000 1101101 1100101 1101101 1100010 1100101 1110010 100111 1110011 100000 1100011 1101111 1101110 1100011 1100101 1110010 1101110 101110 100000 1001000 1100101 100000 1101101 1100101 1101110 1110100 1101001 1101111 1101110 1100101 1100100 100000 1100001 1110011 100000 1100001 1101110 1101111 1110100 1101000 1100101 1110010 100000 1100101 1111000 1100001 1101101 1110000 1101100 1100101 100000 1110100 1101000 1100101 100000 1100110 1100001 1100011 1110100 100000 1110100 1101000 1100001 1110100 100000 1111010 1100101 1110010 1101111 100000 1100100 1100101 1100110 1101001 1100011 1101001 1110100 100000 1101000 1100001 1110011 100000 1100001 1101100 1110010 1100101 1100001 1100100 1111001 100000 1100010 1100101 1100101 1101110 100000 1100001 1100011 1101000 1101001 1100101 1110110 1100101 1100100 100000 1101001 1101110 100000 1110011 1101111 1101101 1100101 100000 1110000 1110010 1101111 1110110 1101001 1101110 1100011 1100101 1110011 111011 100000 1110100 1101000 1100101 1110010 1100101 1100110 1101111 1110010 1100101 101100 100000 1110100 1101000 1100101 100000 1101101 1100101 1100001 1110011 1110101 1110010 1100101 1110011 100000 1110000 1110101 1110100 100000 1100110 1101111 1110010 1110111 1100001 1110010 1100100 100000 1100010 1111001 100000 1110100 1101000 1100101 100000 1100110 1100101 1100100 1100101 1110010 1100001 1101100 100000 1100111 1101111 1110110 1100101 1110010 1101110 1101101 1100101 1101110 1110100 100000 1110111 1101001 1101100 1101100 100000 1101000 1100101 1101100 1110000 100000 1100001 1101100 1101100 100000 1110100 1101000 1100101 100000 1110000 1110010 1101111 1110110 1101001 1101110 1100011 1100101 1110011 101110 100000 1001001 1110100 100000 1110111 1101111 1110101 1101100 1100100 100000 1100010 1100101 100000 1101101 1110101 1100011 1101000 100000 1100101 1100001 1110011 1101001 1100101 1110010 100000 1101001 1100110 100000 1110100 1101000 1100101 1110010 1100101 100000 1110111 1100101 1110010 1100101 100000 1101111 1101110 1101100 1111001 100000 1110100 1110111 1101111 100000 1100011 1101111 1110101 1101110 1110100 1110010 1101001 1100101 1110011 100000 1101111 1101110 100000 1110100 1101000 1101001 1110011 100000 1110000 1101100 1100001 1101110 1100101 1110100 101100 100000 1000011 1100001 1101110 1100001 1100100 1100001 100000 1100001 1101110 1100100 100000 1110100 1101000 1100101 100000 1110010 1100101 1110011 1110100 100000 1101111 1100110 100000 1110111 1101111 1110010 1101100 1100100 101110', 'CipherUsed': 'Binary'}}
    cfg = make_default_config('''1001001 100000 1110011 1101000 1100001 1110010 1100101 100000 1110100 1101000 1100101 100000 1101101 1100101 1101101 1100010 1100101 1110010 100111 1110011 100000 1100011 1101111 1101110 1100011 1100101 1110010 1101110 101110 100000 1001000 1100101 100000 1101101 1100101 1101110 1110100 1101001 1101111 1101110 1100101 1100100 100000 1100001 1110011 100000 1100001 1101110 1101111 1110100 1101000 1100101 1110010 100000 1100101 1111000 1100001 1101101 1110000 1101100 1100101 100000 1110100 1101000 1100101 100000 1100110 1100001 1100011 1110100 100000 1110100 1101000 1100001 1110100 100000 1111010 1100101 1110010 1101111 100000 1100100 1100101 1100110 1101001 1100011 1101001 1110100 100000 1101000 1100001 1110011 100000 1100001 1101100 1110010 1100101 1100001 1100100 1111001 100000 1100010 1100101 1100101 1101110 100000 1100001 1100011 1101000 1101001 1100101 1110110 1100101 1100100 100000 1101001 1101110 100000 1110011 1101111 1101101 1100101 100000 1110000 1110010 1101111 1110110 1101001 1101110 1100011 1100101 1110011 111011 100000 1110100 1101000 1100101 1110010 1100101 1100110 1101111 1110010 1100101 101100 100000 1110100 1101000 1100101 100000 1101101 1100101 1100001 1110011 1110101 1110010 1100101 1110011 100000 1110000 1110101 1110100 100000 1100110 1101111 1110010 1110111 1100001 1110010 1100100 100000 1100010 1111001 100000 1110100 1101000 1100101 100000 1100110 1100101 1100100 1100101 1110010 1100001 1101100 100000 1100111 1101111 1110110 1100101 1110010 1101110 1101101 1100101 1101110 1110100 100000 1110111 1101001 1101100 1101100 100000 1101000 1100101 1101100 1110000 100000 1100001 1101100 1101100 100000 1110100 1101000 1100101 100000 1110000 1110010 1101111 1110110 1101001 1101110 1100011 1100101 1110011 101110 100000 1001001 1110100 100000 1110111 1101111 1110101 1101100 1100100 100000 1100010 1100101 100000 1101101 1110101 1100011 1101000 100000 1100101 1100001 1110011 1101001 1100101 1110010 100000 1101001 1100110 100000 1110100 1101000 1100101 1110010 1100101 100000 1110111 1100101 1110010 1100101 100000 1101111 1101110 1101100 1111001 100000 1110100 1110111 1101111 100000 1100011 1101111 1110101 1101110 1110100 1110010 1101001 1100101 1110011 100000 1101111 1101110 100000 1110100 1101000 1101001 1110011 100000 1110000 1101100 1100001 1101110 1100101 1110100 101100 100000 1000011 1100001 1101110 1100001 1100100 1100001 100000 1100001 1101110 1100100 100000 1110100 1101000 1100101 100000 1110010 1100101 1110011 1110100 100000 1101111 1100110 100000 1110111 1101111 1110010 1101100 1100100 101110''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Reverse_QGbkmcqu():
    # {'PlainText Sentences': 'This creates a self-regulatory incentive for the employer to follow the prudent per cent approach in making improvements to the plan. Jean Chrétien (Prime Minister, Lib. I would also like to thank the constituents of the constituency of Athabasca for re-electing me to represent them for a second term in a riding that certainly without any question is key to the energy future and the energy self-sufficiency of Canada.', 'Encrypted Texts': {'PlainText': 'This creates a self-regulatory incentive for the employer to follow the prudent per cent approach in making improvements to the plan. Jean Chrétien (Prime Minister, Lib. I would also like to thank the constituents of the constituency of Athabasca for re-electing me to represent them for a second term in a riding that certainly without any question is key to the energy future and the energy self-sufficiency of Canada.', 'EncryptedText': '.adanaC fo ycneiciffus-fles ygrene eht dna erutuf ygrene eht ot yek si noitseuq yna tuohtiw ylniatrec taht gnidir a ni mret dnoces a rof meht tneserper ot em gnitcele-er rof acsabahtA fo ycneutitsnoc eht fo stneutitsnoc eht knaht ot ekil osla dluow I .biL ,retsiniM emirP( neitérhC naeJ .nalp eht ot stnemevorpmi gnikam ni hcaorppa tnec rep tnedurp eht wollof ot reyolpme eht rof evitnecni yrotaluger-fles a setaerc sihT', 'CipherUsed': 'Reverse'}}
    cfg = make_default_config('''.adanaC fo ycneiciffus-fles ygrene eht dna erutuf ygrene eht ot yek si noitseuq yna tuohtiw ylniatrec taht gnidir a ni mret dnoces a rof meht tneserper ot em gnitcele-er rof acsabahtA fo ycneutitsnoc eht fo stneutitsnoc eht knaht ot ekil osla dluow I .biL ,retsiniM emirP( neitérhC naeJ .nalp eht ot stnemevorpmi gnikam ni hcaorppa tnec rep tnedurp eht wollof ot reyolpme eht rof evitnecni yrotaluger-fles a setaerc sihT''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base32_QYLPkVkW():
    # {'PlainText Sentences': 'It is high time Parliament took its responsibility. We must not be seduced into accepting them as somehow the way to deal with this issue.', 'Encrypted Texts': {'PlainText': 'It is high time Parliament took its responsibility. We must not be seduced into accepting them as somehow the way to deal with this issue.', 'EncryptedText': 'JF2CA2LTEBUGSZ3IEB2GS3LFEBIGC4TMNFQW2ZLOOQQHI33PNMQGS5DTEBZGK43QN5XHG2LCNFWGS5DZFYQFOZJANV2XG5BANZXXIIDCMUQHGZLEOVRWKZBANFXHI3ZAMFRWGZLQORUW4ZZAORUGK3JAMFZSA43PNVSWQ33XEB2GQZJAO5QXSIDUN4QGIZLBNQQHO2LUNAQHI2DJOMQGS43TOVSS4===', 'CipherUsed': 'Base32'}}
    cfg = make_default_config('''JF2CA2LTEBUGSZ3IEB2GS3LFEBIGC4TMNFQW2ZLOOQQHI33PNMQGS5DTEBZGK43QN5XHG2LCNFWGS5DZFYQFOZJANV2XG5BANZXXIIDCMUQHGZLEOVRWKZBANFXHI3ZAMFRWGZLQORUW4ZZAORUGK3JAMFZSA43PNVSWQ33XEB2GQZJAO5QXSIDUN4QGIZLBNQQHO2LUNAQHI2DJOMQGS43TOVSS4===''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Ascii_QVQLGvXY():
    # {'PlainText Sentences': 'However, no referendum was conducted to determine community support and the Millbrook first nation later raised this as a point of contention. The government has imposed these cuts on all the provinces. This is one of the problems we are having with Milosevic and his government.', 'Encrypted Texts': {'PlainText': 'However, no referendum was conducted to determine community support and the Millbrook first nation later raised this as a point of contention. The government has imposed these cuts on all the provinces. This is one of the problems we are having with Milosevic and his government.', 'EncryptedText': '72 111 119 101 118 101 114 44 32 110 111 32 114 101 102 101 114 101 110 100 117 109 32 119 97 115 32 99 111 110 100 117 99 116 101 100 32 116 111 32 100 101 116 101 114 109 105 110 101 32 99 111 109 109 117 110 105 116 121 32 115 117 112 112 111 114 116 32 97 110 100 32 116 104 101 32 77 105 108 108 98 114 111 111 107 32 102 105 114 115 116 32 110 97 116 105 111 110 32 108 97 116 101 114 32 114 97 105 115 101 100 32 116 104 105 115 32 97 115 32 97 32 112 111 105 110 116 32 111 102 32 99 111 110 116 101 110 116 105 111 110 46 32 84 104 101 32 103 111 118 101 114 110 109 101 110 116 32 104 97 115 32 105 109 112 111 115 101 100 32 116 104 101 115 101 32 99 117 116 115 32 111 110 32 97 108 108 32 116 104 101 32 112 114 111 118 105 110 99 101 115 46 32 84 104 105 115 32 105 115 32 111 110 101 32 111 102 32 116 104 101 32 112 114 111 98 108 101 109 115 32 119 101 32 97 114 101 32 104 97 118 105 110 103 32 119 105 116 104 32 77 105 108 111 115 101 118 105 99 32 97 110 100 32 104 105 115 32 103 111 118 101 114 110 109 101 110 116 46', 'CipherUsed': 'Ascii'}}
    cfg = make_default_config('''72 111 119 101 118 101 114 44 32 110 111 32 114 101 102 101 114 101 110 100 117 109 32 119 97 115 32 99 111 110 100 117 99 116 101 100 32 116 111 32 100 101 116 101 114 109 105 110 101 32 99 111 109 109 117 110 105 116 121 32 115 117 112 112 111 114 116 32 97 110 100 32 116 104 101 32 77 105 108 108 98 114 111 111 107 32 102 105 114 115 116 32 110 97 116 105 111 110 32 108 97 116 101 114 32 114 97 105 115 101 100 32 116 104 105 115 32 97 115 32 97 32 112 111 105 110 116 32 111 102 32 99 111 110 116 101 110 116 105 111 110 46 32 84 104 101 32 103 111 118 101 114 110 109 101 110 116 32 104 97 115 32 105 109 112 111 115 101 100 32 116 104 101 115 101 32 99 117 116 115 32 111 110 32 97 108 108 32 116 104 101 32 112 114 111 118 105 110 99 101 115 46 32 84 104 105 115 32 105 115 32 111 110 101 32 111 102 32 116 104 101 32 112 114 111 98 108 101 109 115 32 119 101 32 97 114 101 32 104 97 118 105 110 103 32 119 105 116 104 32 77 105 108 111 115 101 118 105 99 32 97 110 100 32 104 105 115 32 103 111 118 101 114 110 109 101 110 116 46''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base32_HPqOFPaa():
    # {'PlainText Sentences': 'Mr. Yvan Loubier (Saint-Hyacinthe-Bagot, BQ):\nThis is why these provisions are included in the omnibus bill. It is absolute nonsense. Mr. Peter Mancini (Sydney-Victoria, NDP):\nMr. Speaker, I too am pleased to rise to speak on behalf of the New Democratic Party. There was good reason for the provinces to accept these tax points.', 'Encrypted Texts': {'PlainText': 'Mr. Yvan Loubier (Saint-Hyacinthe-Bagot, BQ):\nThis is why these provisions are included in the omnibus bill. It is absolute nonsense. Mr. Peter Mancini (Sydney-Victoria, NDP):\nMr. Speaker, I too am pleased to rise to speak on behalf of the New Democratic Party. There was good reason for the provinces to accept these tax points.', 'EncryptedText': 'JVZC4ICZOZQW4ICMN52WE2LFOIQCQU3BNFXHILKIPFQWG2LOORUGKLKCMFTW65BMEBBFCKJ2BJKGQ2LTEBUXGIDXNB4SA5DIMVZWKIDQOJXXM2LTNFXW44ZAMFZGKIDJNZRWY5LEMVSCA2LOEB2GQZJAN5WW42LCOVZSAYTJNRWC4ICJOQQGS4ZAMFRHG33MOV2GKIDON5XHGZLOONSS4ICNOIXCAUDFORSXEICNMFXGG2LONEQCQU3ZMRXGK6JNKZUWG5DPOJUWCLBAJZCFAKJ2BJGXELRAKNYGKYLLMVZCYICJEB2G63ZAMFWSA4DMMVQXGZLEEB2G6IDSNFZWKIDUN4QHG4DFMFVSA33OEBRGK2DBNRTCA33GEB2GQZJAJZSXOICEMVWW6Y3SMF2GSYZAKBQXE5DZFYQFI2DFOJSSA53BOMQGO33PMQQHEZLBONXW4IDGN5ZCA5DIMUQHA4TPOZUW4Y3FOMQHI3ZAMFRWGZLQOQQHI2DFONSSA5DBPAQHA33JNZ2HGLQ=', 'CipherUsed': 'Base32'}}
    cfg = make_default_config
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_MorseCode_ytPjprZI():
    # {'PlainText Sentences': 'I want to clarify a few of the facts about the Canada pension plan system.', 'Encrypted Texts': {'PlainText': 'I want to clarify a few of the facts about the Canada pension plan system.', 'EncryptedText': '.. / .-- .- -. - / - --- / -.-. .-.. .- .-. .. ..-. -.-- / .- / ..-. . .-- / --- ..-. / - .... . / ..-. .- -.-. - ... / .- -... --- ..- - / - .... . / -.-. .- -. .- -.. .- / .--. . -. ... .. --- -. / .--. .-.. .- -. / ... -.-- ... - . -- .-.-.-', 'CipherUsed': 'MorseCode'}}
    cfg = make_default_config('''.. / .-- .- -. - / - --- / -.-. .-.. .- .-. .. ..-. -.-- / .- / ..-. . .-- / --- ..-. / - .... . / ..-. .- -.-. - ... / .- -... --- ..- - / - .... . / -.-. .- -. .- -.. .- / .--. . -. ... .. --- -. / .--. .-.. .- -. / ... -.-- ... - . -- .-.-.-''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Ascii_dgDjwMRZ():
    # {'PlainText Sentences': 'For clarification are we still on Group No. 33. If the Indian Act did not exist, would anyone in their right mind get up in the House and introduce it today as a framework or solution for anything?', 'Encrypted Texts': {'PlainText': 'For clarification are we still on Group No. 33. If the Indian Act did not exist, would anyone in their right mind get up in the House and introduce it today as a framework or solution for anything?', 'EncryptedText': '70 111 114 32 99 108 97 114 105 102 105 99 97 116 105 111 110 32 97 114 101 32 119 101 32 115 116 105 108 108 32 111 110 32 71 114 111 117 112 32 78 111 46 32 51 51 46 32 73 102 32 116 104 101 32 73 110 100 105 97 110 32 65 99 116 32 100 105 100 32 110 111 116 32 101 120 105 115 116 44 32 119 111 117 108 100 32 97 110 121 111 110 101 32 105 110 32 116 104 101 105 114 32 114 105 103 104 116 32 109 105 110 100 32 103 101 116 32 117 112 32 105 110 32 116 104 101 32 72 111 117 115 101 32 97 110 100 32 105 110 116 114 111 100 117 99 101 32 105 116 32 116 111 100 97 121 32 97 115 32 97 32 102 114 97 109 101 119 111 114 107 32 111 114 32 115 111 108 117 116 105 111 110 32 102 111 114 32 97 110 121 116 104 105 110 103 63', 'CipherUsed': 'Ascii'}}
    cfg = make_default_config('''70 111 114 32 99 108 97 114 105 102 105 99 97 116 105 111 110 32 97 114 101 32 119 101 32 115 116 105 108 108 32 111 110 32 71 114 111 117 112 32 78 111 46 32 51 51 46 32 73 102 32 116 104 101 32 73 110 100 105 97 110 32 65 99 116 32 100 105 100 32 110 111 116 32 101 120 105 115 116 44 32 119 111 117 108 100 32 97 110 121 111 110 101 32 105 110 32 116 104 101 105 114 32 114 105 103 104 116 32 109 105 110 100 32 103 101 116 32 117 112 32 105 110 32 116 104 101 32 72 111 117 115 101 32 97 110 100 32 105 110 116 114 111 100 117 99 101 32 105 116 32 116 111 100 97 121 32 97 115 32 97 32 102 114 97 109 101 119 111 114 107 32 111 114 32 115 111 108 117 116 105 111 110 32 102 111 114 32 97 110 121 116 104 105 110 103 63''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base16_bxMldgdJ():
    # {'PlainText Sentences': 'The Deputy Speaker:\nThe wonderful thing, as the hon. Ministers who knowingly mislead Parliament will be expected to offer their resignation to the Prime Minister; \nAs hon. Does he understand the commands gee and haw or droite and gauche?', 'Encrypted Texts': {'PlainText': 'The Deputy Speaker:\nThe wonderful thing, as the hon. Ministers who knowingly mislead Parliament will be expected to offer their resignation to the Prime Minister; \nAs hon. Does he understand the commands gee and haw or droite and gauche?', 'EncryptedText': '5468652044657075747920537065616B65723A0A54686520776F6E64657266756C207468696E672C2061732074686520686F6E2E204D696E6973746572732077686F206B6E6F77696E676C79206D69736C656164205061726C69616D656E742077696C6C20626520657870656374656420746F206F666665722074686569722072657369676E6174696F6E20746F20746865205072696D65204D696E69737465723B200A417320686F6E2E20446F657320686520756E6465727374616E642074686520636F6D6D616E64732067656520616E6420686177206F722064726F69746520616E64206761756368653F', 'CipherUsed': 'Base16'}}
    cfg = make_default_config('''5468652044657075747920537065616B65723A0A54686520776F6E64657266756C207468696E672C2061732074686520686F6E2E204D696E6973746572732077686F206B6E6F77696E676C79206D69736C656164205061726C69616D656E742077696C6C20626520657870656374656420746F206F666665722074686569722072657369676E6174696F6E20746F20746865205072696D65204D696E69737465723B200A417320686F6E2E20446F657320686520756E6465727374616E642074686520636F6D6D616E64732067656520616E6420686177206F722064726F69746520616E64206761756368653F''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Ascii_gAFVAeCe():
    # {'PlainText Sentences': '201 lost. And on the heels of the debate on the Canadian social union, we also ask for an immediate increase in social transfers to the provinces. It is clear what Reformers are doing. And more than five members having risen: \nThe Deputy Speaker:\nThe recorded division on the motion stands deferred. That is what will happen if the Reform Party has its way and runs its scalpel through the human resources development ministry.', 'Encrypted Texts': {'PlainText': '201 lost. And on the heels of the debate on the Canadian social union, we also ask for an immediate increase in social transfers to the provinces. It is clear what Reformers are doing. And more than five members having risen: \nThe Deputy Speaker:\nThe recorded division on the motion stands deferred. That is what will happen if the Reform Party has its way and runs its scalpel through the human resources development ministry.', 'EncryptedText': '50 48 49 32 108 111 115 116 46 32 65 110 100 32 111 110 32 116 104 101 32 104 101 101 108 115 32 111 102 32 116 104 101 32 100 101 98 97 116 101 32 111 110 32 116 104 101 32 67 97 110 97 100 105 97 110 32 115 111 99 105 97 108 32 117 110 105 111 110 44 32 119 101 32 97 108 115 111 32 97 115 107 32 102 111 114 32 97 110 32 105 109 109 101 100 105 97 116 101 32 105 110 99 114 101 97 115 101 32 105 110 32 115 111 99 105 97 108 32 116 114 97 110 115 102 101 114 115 32 116 111 32 116 104 101 32 112 114 111 118 105 110 99 101 115 46 32 73 116 32 105 115 32 99 108 101 97 114 32 119 104 97 116 32 82 101 102 111 114 109 101 114 115 32 97 114 101 32 100 111 105 110 103 46 32 65 110 100 32 109 111 114 101 32 116 104 97 110 32 102 105 118 101 32 109 101 109 98 101 114 115 32 104 97 118 105 110 103 32 114 105 115 101 110 58 32 10 84 104 101 32 68 101 112 117 116 121 32 83 112 101 97 107 101 114 58 10 84 104 101 32 114 101 99 111 114 100 101 100 32 100 105 118 105 115 105 111 110 32 111 110 32 116 104 101 32 109 111 116 105 111 110 32 115 116 97 110 100 115 32 100 101 102 101 114 114 101 100 46 32 84 104 97 116 32 105 115 32 119 104 97 116 32 119 105 108 108 32 104 97 112 112 101 110 32 105 102 32 116 104 101 32 82 101 102 111 114 109 32 80 97 114 116 121 32 104 97 115 32 105 116 115 32 119 97 121 32 97 110 100 32 114 117 110 115 32 105 116 115 32 115 99 97 108 112 101 108 32 116 104 114 111 117 103 104 32 116 104 101 32 104 117 109 97 110 32 114 101 115 111 117 114 99 101 115 32 100 101 118 101 108 111 112 109 101 110 116 32 109 105 110 105 115 116 114 121 46', 'CipherUsed': 'Ascii'}}
    cfg = make_default_config('''50 48 49 32 108 111 115 116 46 32 65 110 100 32 111 110 32 116 104 101 32 104 101 101 108 115 32 111 102 32 116 104 101 32 100 101 98 97 116 101 32 111 110 32 116 104 101 32 67 97 110 97 100 105 97 110 32 115 111 99 105 97 108 32 117 110 105 111 110 44 32 119 101 32 97 108 115 111 32 97 115 107 32 102 111 114 32 97 110 32 105 109 109 101 100 105 97 116 101 32 105 110 99 114 101 97 115 101 32 105 110 32 115 111 99 105 97 108 32 116 114 97 110 115 102 101 114 115 32 116 111 32 116 104 101 32 112 114 111 118 105 110 99 101 115 46 32 73 116 32 105 115 32 99 108 101 97 114 32 119 104 97 116 32 82 101 102 111 114 109 101 114 115 32 97 114 101 32 100 111 105 110 103 46 32 65 110 100 32 109 111 114 101 32 116 104 97 110 32 102 105 118 101 32 109 101 109 98 101 114 115 32 104 97 118 105 110 103 32 114 105 115 101 110 58 32 10 84 104 101 32 68 101 112 117 116 121 32 83 112 101 97 107 101 114 58 10 84 104 101 32 114 101 99 111 114 100 101 100 32 100 105 118 105 115 105 111 110 32 111 110 32 116 104 101 32 109 111 116 105 111 110 32 115 116 97 110 100 115 32 100 101 102 101 114 114 101 100 46 32 84 104 97 116 32 105 115 32 119 104 97 116 32 119 105 108 108 32 104 97 112 112 101 110 32 105 102 32 116 104 101 32 82 101 102 111 114 109 32 80 97 114 116 121 32 104 97 115 32 105 116 115 32 119 97 121 32 97 110 100 32 114 117 110 115 32 105 116 115 32 115 99 97 108 112 101 108 32 116 104 114 111 117 103 104 32 116 104 101 32 104 117 109 97 110 32 114 101 115 111 117 114 99 101 115 32 100 101 118 101 108 111 112 109 101 110 116 32 109 105 110 105 115 116 114 121 46''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base16_gGXGjVwc():
    # {'PlainText Sentences': 'I know I do not need to preach to her about the charter. On December 4 when delegates return to their respective countries and heads of state leave with their official copy of the treaty, our work will just be beginning. member has omitted to mention a series of cases which are going to the Supreme Court of Canada dealing with the issue of the aboriginal fishery and the right of aboriginal peoples with respect to other entitlements, be they land, game or other things. I am compelled today to repeat that statement because the warmth I have received here is no less than that I received yesterday.', 'Encrypted Texts': {'PlainText': 'I know I do not need to preach to her about the charter. On December 4 when delegates return to their respective countries and heads of state leave with their official copy of the treaty, our work will just be beginning. member has omitted to mention a series of cases which are going to the Supreme Court of Canada dealing with the issue of the aboriginal fishery and the right of aboriginal peoples with respect to other entitlements, be they land, game or other things. I am compelled today to repeat that statement because the warmth I have received here is no less than that I received yesterday.', 'EncryptedTextipherUsed': 'Base16'}}
    cfg = make_default_config('''49206B6E6F77204920646F206E6F74206E65656420746F2070726561636820746F206865722061626F75742074686520636861727465722E204F6E20446563656D6265722034207768656E2064656C6567617465732072657475726E20746F207468656972207265737065637469766520636F756E747269657320616E64206865616473206F66207374617465206C656176652077697468207468656972206F6666696369616C20636F7079206F6620746865207472656174792C206F757220776F726B2077696C6C206A75737420626520626567696E6E696E672E206D656D62657220686173206F6D697474656420746F206D656E74696F6E206120736572696573206F662063617365732077686963682061726520676F696E6720746F207468652053757072656D6520436F757274206F662043616E616461206465616C696E67207769746820746865206973737565206F66207468652061626F726967696E616C206669736865727920616E6420746865207269676874206F662061626F726967696E616C2070656F706C65732077697468207265737065637420746F206F7468657220656E7469746C656D656E74732C2062652074686579206C616E642C2067616D65206F72206F74686572207468696E67732E204920616D20636F6D70656C6C656420746F64617920746F2072657065617420746861742073746174656D656E74206265636175736520746865207761726D7468204920686176652072656365697665642068657265206973206E6F206C657373207468616E20746861742049207265636569766564207965737465726461792E''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base32_wUMtrPAi():
    # {'PlainText Sentences': 'In 1982, it passed Bill C-124 to freeze the salaries of some 500,000 workers.', 'Encrypted Texts': {'PlainText': 'In 1982, it passed Bill C-124 to freeze the salaries of some 500,000 workers.', 'EncryptedText': 'JFXCAMJZHAZCYIDJOQQHAYLTONSWIICCNFWGYICDFUYTENBAORXSAZTSMVSXUZJAORUGKIDTMFWGC4TJMVZSA33GEBZW63LFEA2TAMBMGAYDAIDXN5ZGWZLSOMXA====', 'CipherUsed': 'Base32'}}
    cfg = make_default_config('''JFXCAMJZHAZCYIDJOQQHAYLTONSWIICCNFWGYICDFUYTENBAORXSAZTSMVSXUZJAORUGKIDTMFWGC4TJMVZSA33GEBZW63LFEA2TAMBMGAYDAIDXN5ZGWZLSOMXA====''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Hex_YtodNhgC():
    # {'PlainText Sentences': "* * * \nABORIGINAL AFFAIRS \nMr. Jim Gouk (Kootenay-Boundary-Okanagan, Ref. While we were facing this economic challenge, we increased expenditures in at least 10 or 11 areas of health care. I appreciate the member's passion for this particular topic, although I would question some of the facts.", 'Encrypted Texts': {'PlainText': "* * * \nABORIGINAL AFFAIRS \nMr. Jim Gouk (Kootenay-Boundary-Okanagan, Ref. While we were facing this economic challenge, we increased expenditures in at least 10 or 11 areas of health care. I appreciate the member's passion for this particular topic, although I would question some of the facts.", 'EncryptedText': '2a202a202a200a41424f524947494e414c2041464641495253200a4d722e204a696d20476f756b20284b6f6f74656e61792d426f756e646172792d4f6b616e6167616e2c205265662e205768696c65207765207765726520666163696e6720746869732065636f6e6f6d6963206368616c6c656e67652c20776520696e6372656173656420657870656e6469747572657320696e206174206c65617374203130206f72203131206172656173206f66206865616c746820636172652e2049206170707265636961746520746865206d656d62657227732070617373696f6e20666f72207468697320706172746963756c617220746f7069632c20616c74686f756768204920776f756c64207175657374696f6e20736f6d65206f66207468652066616374732e', 'CipherUsed': 'Hex'}}
    cfg = make_default_config('''2a202a202a200a41424f524947494e414c2041464641495253200a4d722e204a696d20476f756b20284b6f6f74656e61792d426f756e646172792d4f6b616e6167616e2c205265662e205768696c65207765207765726520666163696e6720746869732065636f6e6f6d6963206368616c6c656e67652c20776520696e6372656173656420657870656e6469747572657320696e206174206c65617374203130206f72203131206172656173206f66206865616c746820636172652e2049206170707265636961746520746865206d656d62657227732070617373696f6e20666f72207468697320706172746963756c617220746f7069632c20616c74686f756768204920776f756c64207175657374696f6e20736f6d65206f66207468652066616374732e''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Vigenere_EXMmeOVl():
    # {'PlainText Sentences': "That includes books, children's books, magazines whether at the news stand or by subscription, and newspapers.", 'Encrypted Texts': {'PlainText': "That includes books, children's books, magazines whether at the news stand or by subscription, and newspapers.", 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
    cfg = make_default_config('''None''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_MorseCode_GoaWvJCp():
    # {'PlainText Sentences': '* * * \nKREVER INQUIRY \nMr. Maurice Vellacott (Wanuskewin, Ref.', 'Encrypted Texts': {'PlainText': '* * * \nKREVER INQUIRY \nMr. Maurice Vellacott (Wanuskewin, Ref.', 'EncryptedText': ' /  /  /  -.- .-. . ...- . .-. / .. -. --.- ..- .. .-. -.-- /  -- .-. .-.-.- / -- .- ..- .-. .. -.-. . / ...- . .-.. .-.. .- -.-. --- - - / -.--. .-- .- -. ..- ... -.- . .-- .. -. --..-- / .-. . ..-. .-.-.-', 'CipherUsed': 'MorseCode'}}
    cfg = make_default_config(''' /  /  /  -.- .-. . ...- . .-. / .. -. --.- ..- .. .-. -.-- /  -- .-. .-.-.- / -- .- ..- .-. .. -.-. . / ...- . .-.. .-.. .- -.-. --- - - / -.--. .-- .- -. ..- ... -.- . .-- .. -. --..-- / .-. . ..-. .-.-.-''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base64_ffLzdhJe():
    # {'PlainText Sentences': "Pierre S. Pettigrew \nMr. Paul Crête \nHon. I would suggest that in the Reform Party's attitude toward justice-and I do not know how many times you want me to mention the word justice but I am quite prepared to do it for the next 10 or 15 minutes just to prove to you that there is indeed justice in what I am trying to say-there is no justice in what the Reform Party is putting forward. These historic events reflect the spirit behind Gathering Strength. We are talking about our take home pay.", 'Encrypted Texts': {'PlainText': "Pierre S. Pettigrew \nMr. Paul Crête \nHon. I would suggest that in the Reform Party's attitude toward justice-and I do not know how many times you want me to mention the word justice but I am quite prepared to do it for the next 10 or 15 minutes just to prove to you that there is indeed justice in what I am trying to say-there is no justice in what the Reform Party is putting forward. These historic events reflect the spirit behind Gathering Strength. We are talking about our take home pay.", 'EncryptedText': 'UGllcnJlIFMuIFBldHRpZ3JldyAKTXIuIFBhdWwgQ3LDqnRlIApIb24uIEkgd291bGQgc3VnZ2VzdCB0aGF0IGluIHRoZSBSZWZvcm0gUGFydHkncyBhdHRpdHVkZSB0b3dhcmQganVzdGljZS1hbmQgSSBkbyBub3Qga25vdyBob3cgbWFueSB0aW1lcyB5b3Ugd2FudCBtZSB0byBtZW50aW9uIHRoZSB3b3JkIGp1c3RpY2UgYnV0IEkgYW0gcXVpdGUgcHJlcGFyZWQgdG8gZG8gaXQgZm9yIHRoZSBuZXh0IDEwIG9yIDE1IG1pbnV0ZXMganVzdCB0byBwcm92ZSB0byB5b3UgdGhhdCB0aGVyZSBpcyBpbmRlZWQganVzdGljZSBpbiB3aGF0IEkgYW0gdHJ5aW5nIHRvIHNheS10aGVyZSBpcyBubyBqdXN0aWNlIGluIHdoYXQgdGhlIFJlZm9ybSBQYXJ0eSBpcyBwdXR0aW5nIGZvcndhcmQuIFRoZXNlIGhpc3RvcmljIGV2ZW50cyByZWZsZWN0IHRoZSBzcGlyaXQgYmVoaW5kIEdhdGhlcmluZyBTdHJlbmd0aC4gV2UgYXJlIHRhbGtpbmcgYWJvdXQgb3VyIHRha2UgaG9tZSBwYXku', 'CipherUsed': 'Base64'}}
    cfg = make_default_config('''UGllcnJlIFMuIFBldHRpZ3JldyAKTXIuIFBhdWwgQ3LDqnRlIApIb24uIEkgd291bGQgc3VnZ2VzdCB0aGF0IGluIHRoZSBSZWZvcm0gUGFydHkncyBhdHRpdHVkZSB0b3dhcmQganVzdGljZS1hbmQgSSBkbyBub3Qga25vdyBob3cgbWFueSB0aW1lcyB5b3Ugd2FudCBtZSB0byBtZW50aW9uIHRoZSB3b3JkIGp1c3RpY2UgYnV0IEkgYW0gcXVpdGUgcHJlcGFyZWQgdG8gZG8gaXQgZm9yIHRoZSBuZXh0IDEwIG9yIDE1IG1pbnV0ZXMganVzdCB0byBwcm92ZSB0byB5b3UgdGhhdCB0aGVyZSBpcyBpbmRlZWQganVzdGljZSBpbiB3aGF0IEkgYW0gdHJ5aW5nIHRvIHNheS10aGVyZSBpcyBubyBqdXN0aWNlIGluIHdoYXQgdGhlIFJlZm9ybSBQYXJ0eSBpcyBwdXR0aW5nIGZvcndhcmQuIFRoZXNlIGhpc3RvcmljIGV2ZW50cyByZWZsZWN0IHRoZSBzcGlyaXQgYmVoaW5kIEdhdGhlcmluZyBTdHJlbmd0aC4gV2UgYXJlIHRhbGtpbmcgYWJvdXQgb3VyIHRha2UgaG9tZSBwYXku''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base32_lcemBUKz():
    # {'PlainText Sentences': 'It is a committee the government put together to study seniors and sexuality. If we are really sincere about reducing harvesting capacity, it should come out of the industry. Mr. Michel Bellehumeur:\nMr. Speaker, I too have worked with the member on a number of occasions and I can confirm that he is highly intelligent. colleague for expressing his concerns on the matter. In 1993 a Transport Canada study revealed that over 300 Canadians each day are being injured as a result of an alcohol related crash.', 'Encrypted Texts': {'PlainText': 'It is a committee the government put together to study seniors and sexuality. If we are really sincere about reducing harvesting capacity, it should come out of the industry. Mr. Michel Bellehumeur:\nMr. Speaker, I too have worked with the member on a number of occasions and I can confirm that he is highly intelligent. colleague for expressing his concerns on the matter. In 1993 a Transport Canada study revealed that over 300 Canadians each day are being injured as a result of an alcohol related crash.', 'EncryptedTextipherUsed': 'Base32'}}
    cfg = make_default_config
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Hex_YuALPFiy():
    # {'PlainText Sentences': '* * * \nEMPLOYMENT INSURANCE \nMr. Gilles Bernier (Tobique-Mactaquac, PC):\nMr. Speaker, at human resources development offices across the country people who are going in to pick up their cheques are getting something extra.', 'Encrypted Texts': {'PlainText': '* * * \nEMPLOYMENT INSURANCE \nMr. Gilles Bernier (Tobique-Mactaquac, PC):\nMr. Speaker, at human resources development offices across the country people who are going in to pick up their cheques are getting something extra.', 'EncryptedText': '2a202a202a200a454d504c4f594d454e5420494e535552414e4345200a4d722e2047696c6c6573204265726e6965722028546f62697175652d4d61637461717561632c205043293a0a4d722e20537065616b65722c2061742068756d616e207265736f757263657320646576656c6f706d656e74206f666669636573206163726f73732074686520636f756e7472792070656f706c652077686f2061726520676f696e6720696e20746f207069636b2075702074686569722063686571756573206172652067657474696e6720736f6d657468696e672065787472612e', 'CipherUsed': 'Hex'}}
    cfg = make_default_config('''2a202a202a200a454d504c4f594d454e5420494e535552414e4345200a4d722e2047696c6c6573204265726e6965722028546f62697175652d4d61637461717561632c205043293a0a4d722e20537065616b65722c2061742068756d616e207265736f757263657320646576656c6f706d656e74206f666669636573206163726f73732074686520636f756e7472792070656f706c652077686f2061726520676f696e6720696e20746f207069636b2075702074686569722063686571756573206172652067657474696e6720736f6d657468696e672065787472612e''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Vigenere_FJMWahks():
    # {'PlainText Sentences': 'Nothing new is being added to the debate. Was I included in that last vote? Not a single tax expert has dared to put his credibility on the line publicly and say that the Minister of Finance was not in apparent or outright conflict of interest and that the structure of his companies was not such as to provide him with undue advantages or tax savings related to clause 241.', 'Encrypted Texts': {'PlainText': 'Nothing new is being added to the debate. Was I included in that last vote? Not a single tax expert has dared to put his credibility on the line publicly and say that the Minister of Finance was not in apparent or outright conflict of interest and that the structure of his companies was not such as to provide him with undue advantages or tax savings related to clause 241.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
    cfg = make_default_config('''None''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Vigenere_NpcwaNKb():
    # {'PlainText Sentences': "The government's bill is an important recognition of the right of any province to speak its mind in terms of its will. I am simply saying that this bill, with all its regulatory means, is knocking the single contractor completely out of business. It is the duty of company officers to ensure that work is done in the safest of all possible conditions.", 'Encrypted Texts': {'PlainText': "The government's bill is an important recognition of the right of any province to speak its mind in terms of its will. I am simply saying that this bill, with all its regulatory means, is knocking the single contractor completely out of business. It is the duty of company officers to ensure that work is done in the safest of all possible conditions.", 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
    cfg = make_default_config('''None''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base32_eeQfAnme():
    # {'PlainText Sentences': 'I used to help run a phone bank. They will not benefit from this program, even though they may live right next door to somebody who will.', 'Encrypted Texts': {'PlainText': 'I used to help run a phone bank. They will not benefit from this program, even though they may live right next door to somebody who will.', 'EncryptedText': 'JEQHK43FMQQHI3ZANBSWY4BAOJ2W4IDBEBYGQ33OMUQGEYLONMXCAVDIMV4SA53JNRWCA3TPOQQGEZLOMVTGS5BAMZZG63JAORUGS4ZAOBZG6Z3SMFWSYIDFOZSW4IDUNBXXKZ3IEB2GQZLZEBWWC6JANRUXMZJAOJUWO2DUEBXGK6DUEBSG633SEB2G6IDTN5WWKYTPMR4SA53IN4QHO2LMNQXA====', 'CipherUsed': 'Base32'}}
    cfg = make_default_config('''JEQHK43FMQQHI3ZANBSWY4BAOJ2W4IDBEBYGQ33OMUQGEYLONMXCAVDIMV4SA53JNRWCA3TPOQQGEZLOMVTGS5BAMZZG63JAORUGS4ZAOBZG6Z3SMFWSYIDFOZSW4IDUNBXXKZ3IEB2GQZLZEBWWC6JANRUXMZJAOJUWO2DUEBXGK6DUEBSG633SEB2G6IDTN5WWKYTPMR4SA53IN4QHO2LMNQXA====''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_MorseCode_GEcwILFn():
    # {'PlainText Sentences': 'Some hon. Who would want to even work one hour of overtime this Christmas when this covetous, curmudgeon finance minister wants it all? I wish to salute the Lacloche Manitoulin Business Development Corporation, the Waubetek Business Development Corporation, the Community Development Corporation of Sault Ste. There are $1.7 billion specifically for poor children.', 'Encrypted Texts': {'PlainText': 'Some hon. Who would want to even work one hour of overtime this Christmas when this covetous, curmudgeon finance minister wants it all? I wish to salute the Lacloche Manitoulin Business Development Corporation, the Waubetek Business Development Corporation, the Community Development Corporation of Sault Ste. There are $1.7 billion specifically for poor children.', 'EncryptedText': '... --- -- . / .... --- -. .-.-.- / .-- .... --- / .-- --- ..- .-.. -.. / .-- .- -. - / - --- / . ...- . -. / .-- --- .-. -.- / --- -. . / .... --- ..- .-. / --- ..-. / --- ...- . .-. - .. -- . / - .... .. ... / -.-. .... .-. .. ... - -- .- ... / .-- .... . -. / - .... .. ... / -.-. --- ...- . - --- ..- ... --..-- / -.-. ..- .-. -- ..- -.. --. . --- -. / ..-. .. -. .- -. -.-. . / -- .. -. .. ... - . .-. / .-- .- -. - ... / .. - / .- .-.. .-.. ..--.. / .. / .-- .. ... .... / - --- / ... .- .-.. ..- - . / - .... . / .-.. .- -.-. .-.. --- -.-. .... . / -- .- -. .. - --- ..- .-.. .. -. / -... ..- ... .. -. . ... ... / -.. . ...- . .-.. --- .--. -- . -. - / -.-. --- .-. .--. --- .-. .- - .. --- -. --..-- / - .... . / .-- .- ..- -... . - . -.- / -... ..- ... .. -. . ... ... / -.. . ...- . .-.. --- .--. -- . -. - / -.-. --- .-. .--. --- .-. .- - .. --- -. --..-- / - .... . / -.-. --- -- -- ..- -. .. - -.-- / -.. . ...- . .-.. --- .--. -- . -. - / -.-. --- .-. .--. --- .-. .- - .. --- -. / --- ..-. / ... .- ..- .-.. - / ... - . .-.-.- / - .... . .-. . / .- .-. . / ...-..- .---- .-.-.- --... / -... .. .-.. .-.. .. --- -. / ... .--. . -.-. .. ..-. .. -.-. .- .-.. .-.. -.-- / ..-. --- .-. / .--. --- --- .-. / -.-. .... .. .-.. -.. .-. . -. .-.-.-', 'CipherUsed': 'MorseCode'}}
    cfg = make_default_config('''... --- -- . / .... --- -. .-.-.- / .-- .... --- / .-- --- ..- .-.. -.. / .-- .- -. - / - --- / . ...- . -. / .-- --- .-. -.- / --- -. . / .... --- ..- .-. / --- ..-. / --- ...- . .-. - .. -- . / - .... .. ... / -.-. .... .-. .. ... - -- .- ... / .-- .... . -. / - .... .. ... / -.-. --- ...- . - --- ..- ... --..-- / -.-. ..- .-. -- ..- -.. --. . --- -. / ..-. .. -. .- -. -.-. . / -- .. -. .. ... - . .-. / .-- .- -. - ... / .. - / .- .-.. .-.. ..--.. / .. / .-- .. ... .... / - --- / ... .- .-.. ..- - . / - .... . / .-.. .- -.-. .-.. --- -.-. .... . / -- .- -. .. - --- ..- .-.. .. -. / -... ..- ... .. -. . ... ... / -.. . ...- . .-.. --- .--. -- . -. - / -.-. --- .-. .--. --- .-. .- - .. --- -. --..-- / - .... . / .-- .- ..- -... . - . -.- / -... ..- ... .. -. . ... ... / -.. . ...- . .-.. --- .--. -- . -. - / -.-. --- .-. .--. --- .-. .- - .. --- -. --..-- / - .... . / -.-. --- -- -- ..- -. .. - -.-- / -.. . ...- . .-.. --- .--. -- . -. - / -.-. --- .-. .--. --- .-. .- - .. --- -. / --- ..-. / ... .- ..- .-.. - / ... - . .-.-.- / - .... . .-. . / .- .-. . / ...-..- .---- .-.-.- --... / -... .. .-.. .-.. .. --- -. / ... .--. . -.-. .. ..-. .. -.-. .- .-.. .-.. -.-- / ..-. --- .-. / .--. --- --- .-. / -.-. .... .. .-.. -.. .-. . -. .-.-.-''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Ascii_iOLuMfyr():
    # {'PlainText Sentences': "):\nMr. Speaker, PCB contaminated earth from Toronto is on its way to the Saguenay-Lac-Saint-Jean area with the permission of Lucien Bouchard's PQ government but without the permission of the people there and the people of Quebec, who were not consulted. This really is not a park bill but is an environmental bill. 1 \nThat Bill C-36 be amended by deleting Clause 2.", 'Encrypted Texts': {'PlainText': "):\nMr. Speaker, PCB contaminated earth from Toronto is on its way to the Saguenay-Lac-Saint-Jean area with the permission of Lucien Bouchard's PQ government but without the permission of the people there and the people of Quebec, who were not consulted. This really is not a park bill but is an environmental bill. 1 \nThat Bill C-36 be amended by deleting Clause 2.", 'EncryptedText': '41 58 10 77 114 46 32 83 112 101 97 107 101 114 44 32 80 67 66 32 99 111 110 116 97 109 105 110 97 116 101 100 32 101 97 114 116 104 32 102 114 111 109 32 84 111 114 111 110 116 111 32 105 115 32 111 110 32 105 116 115 32 119 97 121 32 116 111 32 116 104 101 32 83 97 103 117 101 110 97 121 45 76 97 99 45 83 97 105 110 116 45 74 101 97 110 32 97 114 101 97 32 119 105 116 104 32 116 104 101 32 112 101 114 109 105 115 115 105 111 110 32 111 102 32 76 117 99 105 101 110 32 66 111 117 99 104 97 114 100 39 115 32 80 81 32 103 111 118 101 114 110 109 101 110 116 32 98 117 116 32 119 105 116 104 111 117 116 32 116 104 101 32 112 101 114 109 105 115 115 105 111 110 32 111 102 32 116 104 101 32 112 101 111 112 108 101 32 116 104 101 114 101 32 97 110 100 32 116 104 101 32 112 101 111 112 108 101 32 111 102 32 81 117 101 98 101 99 44 32 119 104 111 32 119 101 114 101 32 110 111 116 32 99 111 110 115 117 108 116 101 100 46 32 84 104 105 115 32 114 101 97 108 108 121 32 105 115 32 110 111 116 32 97 32 112 97 114 107 32 98 105 108 108 32 98 117 116 32 105 115 32 97 110 32 101 110 118 105 114 111 110 109 101 110 116 97 108 32 98 105 108 108 46 32 49 32 10 84 104 97 116 32 66 105 108 108 32 67 45 51 54 32 98 101 32 97 109 101 110 100 101 100 32 98 121 32 100 101 108 101 116 105 110 103 32 67 108 97 117 115 101 32 50 46', 'CipherUsed': 'Ascii'}}
    cfg = make_default_config('''41 58 10 77 114 46 32 83 112 101 97 107 101 114 44 32 80 67 66 32 99 111 110 116 97 109 105 110 97 116 101 100 32 101 97 114 116 104 32 102 114 111 109 32 84 111 114 111 110 116 111 32 105 115 32 111 110 32 105 116 115 32 119 97 121 32 116 111 32 116 104 101 32 83 97 103 117 101 110 97 121 45 76 97 99 45 83 97 105 110 116 45 74 101 97 110 32 97 114 101 97 32 119 105 116 104 32 116 104 101 32 112 101 114 109 105 115 115 105 111 110 32 111 102 32 76 117 99 105 101 110 32 66 111 117 99 104 97 114 100 39 115 32 80 81 32 103 111 118 101 114 110 109 101 110 116 32 98 117 116 32 119 105 116 104 111 117 116 32 116 104 101 32 112 101 114 109 105 115 115 105 111 110 32 111 102 32 116 104 101 32 112 101 111 112 108 101 32 116 104 101 114 101 32 97 110 100 32 116 104 101 32 112 101 111 112 108 101 32 111 102 32 81 117 101 98 101 99 44 32 119 104 111 32 119 101 114 101 32 110 111 116 32 99 111 110 115 117 108 116 101 100 46 32 84 104 105 115 32 114 101 97 108 108 121 32 105 115 32 110 111 116 32 97 32 112 97 114 107 32 98 105 108 108 32 98 117 116 32 105 115 32 97 110 32 101 110 118 105 114 111 110 109 101 110 116 97 108 32 98 105 108 108 46 32 49 32 10 84 104 97 116 32 66 105 108 108 32 67 45 51 54 32 98 101 32 97 109 101 110 100 101 100 32 98 121 32 100 101 108 101 116 105 110 103 32 67 108 97 117 115 101 32 50 46''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Hex_PNRQnWbj():
    # {'PlainText Sentences': 'Part of the role of parliament is to make sure that this voice is there for future generations. In my instance I have neighbours from a wide spectrum of national backgrounds.', 'Encrypted Texts': {'PlainText': 'Part of the role of parliament is to make sure that this voice is there for future generations. In my instance I have neighbours from a wide spectrum of national backgrounds.', 'EncryptedText': '50617274206f662074686520726f6c65206f66207061726c69616d656e7420697320746f206d616b6520737572652074686174207468697320766f69636520697320746865726520666f72206675747572652067656e65726174696f6e732e20496e206d7920696e7374616e636520492068617665206e65696768626f7572732066726f6d2061207769646520737065637472756d206f66206e6174696f6e616c206261636b67726f756e64732e', 'CipherUsed': 'Hex'}}
    cfg = make_default_config('''50617274206f662074686520726f6c65206f66207061726c69616d656e7420697320746f206d616b6520737572652074686174207468697320766f69636520697320746865726520666f72206675747572652067656e65726174696f6e732e20496e206d7920696e7374616e636520492068617665206e65696768626f7572732066726f6d2061207769646520737065637472756d206f66206e6174696f6e616c206261636b67726f756e64732e''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Reverse_ccGBzctg():
    # {'PlainText Sentences': '):\nMr. Speaker, my comments will also to be very short.', 'Encrypted Texts': {'PlainText': '):\nMr. Speaker, my comments will also to be very short.', 'EncryptedText': '.trohs yrev eb ot osla lliw stnemmoc ym ,rekaepS .rM\n:)', 'CipherUsed': 'Reverse'}}
    cfg = make_default_config('''.trohs yrev eb ot osla lliw stnemmoc ym ,rekaepS .rM
:)''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Reverse_OLjveUdz():
    # {'PlainText Sentences': 'As a result, our telecommunications companies will have more secure access to major markets such as the United States, the European Union and Japan, as well as the developing markets of Asia and Latin America. That is why I was particularly perturbed by the so-called flag flap a few weeks ago when one party chose to bring into the House a debate regarding the rules and to make it a partisan issue. Prominent among the many services the CNIB provides is a national library service for print handicapped persons.', 'Encrypted Texts': {'PlainText': 'As a result, our telecommunications companies will have more secure access to major markets such as the United States, the European Union and Japan, as well as the developing markets of Asia and Latin America. That is why I was particularly perturbed by the so-called flag flap a few weeks ago when one party chose to bring into the House a debate regarding the rules and to make it a partisan issue. Prominent among the many services the CNIB provides is a national library service for print handicapped persons.', 'EncryptedText': '.snosrep deppacidnah tnirp rof ecivres yrarbil lanoitan a si sedivorp BINC eht secivres ynam eht gnoma tnenimorP .eussi nasitrap a ti ekam ot dna selur eht gnidrager etabed a esuoH eht otni gnirb ot esohc ytrap eno nehw oga skeew wef a palf galf dellac-os eht yb debrutrep ylralucitrap saw I yhw si tahT .aciremA nitaL dna aisA fo stekram gnipoleved eht sa llew sa ,napaJ dna noinU naeporuE eht ,setatS detinU eht sa hcus stekram rojam ot ssecca eruces erom evah lliw seinapmoc snoitacinummocelet ruo ,tluser a sA', 'CipherUsed': 'Reverse'}}
    cfg = make_default_config('''.snosrep deppacidnah tnirp rof ecivres yrarbil lanoitan a si sedivorp BINC eht secivres ynam eht gnoma tnenimorP .eussi nasitrap a ti ekam ot dna selur eht gnidrager etabed a esuoH eht otni gnirb ot esohc ytrap eno nehw oga skeew wef a palf galf dellac-os eht yb debrutrep ylralucitrap saw I yhw si tahT .aciremA nitaL dna aisA fo stekram gnipoleved eht sa llew sa ,napaJ dna noinU naeporuE eht ,setatS detinU eht sa hcus stekram rojam ot ssecca eruces erom evah lliw seinapmoc snoitacinummocelet ruo ,tluser a sA''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base64_FJuAWQdT():
    # {'PlainText Sentences': 'I will deal with that in a moment. In chapters 2 and 11 of the treaty, the provisions for self-government undermine this common sense understanding of how Indian governments must operate in conformity with Canadian laws. I hope that the review will go further than the periodical report and include non-government and non-profit organizations. What is new in the bill is that persons applying for citizenship must demonstrate solid links with Canada.', 'Encrypted Texts': {'PlainText': 'I will deal with that in a moment. In chapters 2 and 11 of the treaty, the provisions for self-government undermine this common sense understanding of how Indian governments must operate in conformity with Canadian laws. I hope that the review will go further than the periodical report and include non-government and non-profit organizations. What is new in the bill is that persons applying for citizenship must demonstrate solid links with Canada.', 'EncryptedText': 'SSB3aWxsIGRlYWwgd2l0aCB0aGF0IGluIGEgbW9tZW50LiBJbiBjaGFwdGVycyAyIGFuZCAxMSBvZiB0aGUgdHJlYXR5LCB0aGUgcHJvdmlzaW9ucyBmb3Igc2VsZi1nb3Zlcm5tZW50IHVuZGVybWluZSB0aGlzIGNvbW1vbiBzZW5zZSB1bmRlcnN0YW5kaW5nIG9mIGhvdyBJbmRpYW4gZ292ZXJubWVudHMgbXVzdCBvcGVyYXRlIGluIGNvbmZvcm1pdHkgd2l0aCBDYW5hZGlhbiBsYXdzLiBJIGhvcGUgdGhhdCB0aGUgcmV2aWV3IHdpbGwgZ28gZnVydGhlciB0aGFuIHRoZSBwZXJpb2RpY2FsIHJlcG9ydCBhbmQgaW5jbHVkZSBub24tZ292ZXJubWVudCBhbmQgbm9uLXByb2ZpdCBvcmdhbml6YXRpb25zLiBXaGF0IGlzIG5ldyBpbiB0aGUgYmlsbCBpcyB0aGF0IHBlcnNvbnMgYXBwbHlpbmcgZm9yIGNpdGl6ZW5zaGlwIG11c3QgZGVtb25zdHJhdGUgc29saWQgbGlua3Mgd2l0aCBDYW5hZGEu', 'CipherUsed': 'Base64'}}
    cfg = make_default_config('''SSB3aWxsIGRlYWwgd2l0aCB0aGF0IGluIGEgbW9tZW50LiBJbiBjaGFwdGVycyAyIGFuZCAxMSBvZiB0aGUgdHJlYXR5LCB0aGUgcHJvdmlzaW9ucyBmb3Igc2VsZi1nb3Zlcm5tZW50IHVuZGVybWluZSB0aGlzIGNvbW1vbiBzZW5zZSB1bmRlcnN0YW5kaW5nIG9mIGhvdyBJbmRpYW4gZ292ZXJubWVudHMgbXVzdCBvcGVyYXRlIGluIGNvbmZvcm1pdHkgd2l0aCBDYW5hZGlhbiBsYXdzLiBJIGhvcGUgdGhhdCB0aGUgcmV2aWV3IHdpbGwgZ28gZnVydGhlciB0aGFuIHRoZSBwZXJpb2RpY2FsIHJlcG9ydCBhbmQgaW5jbHVkZSBub24tZ292ZXJubWVudCBhbmQgbm9uLXByb2ZpdCBvcmdhbml6YXRpb25zLiBXaGF0IGlzIG5ldyBpbiB0aGUgYmlsbCBpcyB0aGF0IHBlcnNvbnMgYXBwbHlpbmcgZm9yIGNpdGl6ZW5zaGlwIG11c3QgZGVtb25zdHJhdGUgc29saWQgbGlua3Mgd2l0aCBDYW5hZGEu''')
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 

def test_Base16_AyeAAilX():
    # {'PlainText Sentences': "members:\nYea. ):\nMr. Speaker, I seek unanimous consent for the following motion: \nThat at the conclusion of this debate we will call Bill C-51 but that we will then hear only the minister's speech and at that point, at the conclusion of her speech, we will see the clock as standing at 6.30 p.m. ):\nMadam Speaker, this is the first I have heard about this. If some error has been made I will see to it that (a) the Hansard blues are checked through and (b) we will refer to the audio which is on the television portion. This government does not even have the excuse it used these last years when it said that the nation's finances forced it to make such cuts.", 'Encrypted Texts': {'PlainText': "members:\nYea. ):\nMr. Speaker, I seek unanimous consent for the following motion: \nThat at the conclusion of this debate we will call Bill C-51 but that we will then hear only the minister's speech and at that point, at the conclusion of her speech, we will see the clock as standing at 6.30 p.m. ):\nMadam Speaker, this is the first I have heard about this. If some error has been made I will see to it that (a) the Hansard blues are checked through and (b) we will refer to the audio which is on the television portion. This government does not even have the excuse it used these last years when it said that the nation's finances forced it to make such cuts.", 'EncryptedText': '6D656D626572733A0A5965612E20293A0A4D722E20537065616B65722C2049207365656B20756E616E696D6F757320636F6E73656E7420666F722074686520666F6C6C6F77696E67206D6F74696F6E3A200A546861742061742074686520636F6E636C7573696F6E206F662074686973206465626174652077652077696C6C2063616C6C2042696C6C20432D35312062757420746861742077652077696C6C207468656E2068656172206F6E6C7920746865206D696E697374657227732073706565636820616E64206174207468617420706F696E742C2061742074686520636F6E636C7573696F6E206F6620686572207370656563682C2077652077696C6C207365652074686520636C6F636B206173207374616E64696E6720617420362E333020702E6D2E20293A0A4D6164616D20537065616B65722C207468697320697320746865206669727374204920686176652068656172642061626F757420746869732E20496620736F6D65206572726F7220686173206265656E206D61646520492077696C6C2073656520746F206974207468617420286129207468652048616E7361726420626C7565732061726520636865636B6564207468726F75676820616E64202862292077652077696C6C20726566657220746F2074686520617564696F207768696368206973206F6E207468652074656C65766973696F6E20706F7274696F6E2E205468697320676F7665726E6D656E7420646F6573206E6F74206576656E206861766520746865206578637573652069742075736564207468657365206C617374207965617273207768656E2069742073616964207468617420746865206E6174696F6E27732066696E616E63657320666F7263656420697420746F206D616B65207375636820637574732E', 'CipherUsed': 'Base16'}}
    cfg = make_default_config
    cfg["debug"] = "TRACE"
    result = main(cfg)

    assert result["IsPlaintext?"] == True 
